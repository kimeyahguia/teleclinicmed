
package subInterfaces;

import com.itextpdf.text.Chunk;
import javax.swing.*;
import java.awt.*;

import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import com.itextpdf.text.Document;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.sql.Connection;
import javax.swing.JTabbedPane;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import com.toedter.calendar.JDateChooser;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Date;
import javax.swing.JOptionPane;
import java.sql.ResultSet;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartPanel;
import mainInterfaces.adminDashboard;
import org.jfree.chart.ChartFactory;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;

import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;

import java.text.DecimalFormat;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;

public class manageInventoryBillsADMIN extends javax.swing.JFrame {
    private static manageInventoryBillsADMIN instance; 
    public JTabbedPane tabbedPane;
    
    private int accountId;
    private static int loggedInAccountID; 
     public manageInventoryBillsADMIN() {
         loggedInAccountID = accountId;
         this.accountId = accountId;
        instance = this; // Store instance
        initComponents(); // Ensure this initializes JTabbedPane properly
        tabbedPane = invenpaytabb;
        
        
        
        
        //report
         updateDailyRevenue(DAILYREVENUE);
         updateDailyRevenue();
         showRevenueCompositionChart(pieforInventorynMeds);
         showAllOutstandingPaymentsInJList(outstandingList);
         showExpiringMedicines(nearExpimeds);
         
          getAppointmentPaymentTable(paymentCOnsult);
         //tables
         loadMedicineInventoryToTable(medsTabb);
         getMedicineTransactionTable(paymentMEds);
         getAppointmentPaymentTable(paymentCOnsult);
         addAppointmentPaymentMouseListener(paymentCOnsult);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        jtabb = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        invenpaytabb = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        medsTabb = new javax.swing.JTable();
        editStock = new javax.swing.JButton();
        showmedsDeets = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        namePRod = new javax.swing.JLabel();
        picProd = new javax.swing.JLabel();
        deetsPro = new javax.swing.JLabel();
        stockprod = new javax.swing.JLabel();
        priceDeets = new javax.swing.JLabel();
        categoryProd = new javax.swing.JLabel();
        addMEd = new javax.swing.JButton();
        editMeds = new javax.swing.JButton();
        photoMEds = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        viewInvent4 = new javax.swing.JButton();
        editmedsPayment = new javax.swing.JButton();
        viewInvent7 = new javax.swing.JButton();
        addpayment = new javax.swing.JButton();
        PAYMENTVIA = new javax.swing.JComboBox<>();
        tabbpay = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        paymentMEds = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        paymentCOnsult = new javax.swing.JTable();
        editPAyments1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        MENUBTN = new javax.swing.JButton();
        viewInvent = new javax.swing.JButton();
        viewPayment = new javax.swing.JButton();
        viewPayment2 = new javax.swing.JButton();
        DAILYREVENUE = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        pieforInventorynMeds = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        outstandingList = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        nearExpimeds = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(42, 1039, -1, -1));
        getContentPane().add(jtabb, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 851, -1, -1));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 210, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 154, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(526, 1039, -1, -1));

        jPanel4.setBackground(new java.awt.Color(0, 0, 51));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Century Schoolbook", 1, 28)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("INVENTORY | PAYMENTS");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(480, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 35, Short.MAX_VALUE)
                .addComponent(jLabel2))
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 20, 910, 70));

        jPanel7.setBackground(new java.awt.Color(121, 158, 229));
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        medsTabb.setBackground(new java.awt.Color(204, 204, 255));
        medsTabb.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        medsTabb.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        medsTabb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Med ID", "Name", "Category", "Details", "Stock", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        medsTabb.setGridColor(new java.awt.Color(0, 0, 0));
        jScrollPane2.setViewportView(medsTabb);

        jPanel7.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 100, 580, 390));

        editStock.setBackground(new java.awt.Color(0, 153, 255));
        editStock.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        editStock.setForeground(new java.awt.Color(255, 255, 255));
        editStock.setText("Manage Stock");
        editStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editStockActionPerformed(evt);
            }
        });
        jPanel7.add(editStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 410, 130, 30));

        showmedsDeets.setBackground(new java.awt.Color(0, 153, 255));
        showmedsDeets.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        showmedsDeets.setForeground(new java.awt.Color(255, 255, 255));
        showmedsDeets.setText("Show Details");
        showmedsDeets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showmedsDeetsActionPerformed(evt);
            }
        });
        jPanel7.add(showmedsDeets, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 450, 130, 30));

        namePRod.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        namePRod.setText("Name product");

        picProd.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N

        deetsPro.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        deetsPro.setText("dESCRIP");

        stockprod.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        stockprod.setText("QUANTITY");

        priceDeets.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        priceDeets.setText("PRESYO");

        categoryProd.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        categoryProd.setText("dESCRIP");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(picProd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(33, 33, Short.MAX_VALUE)
                                .addComponent(namePRod, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 29, 29))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(categoryProd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(priceDeets, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(stockprod, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(deetsPro, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(16, 16, 16)))
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(namePRod)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(picProd, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(categoryProd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deetsPro)
                .addGap(18, 18, 18)
                .addComponent(stockprod, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priceDeets)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        jPanel7.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 260, 270));

        addMEd.setBackground(new java.awt.Color(0, 153, 255));
        addMEd.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        addMEd.setForeground(new java.awt.Color(255, 255, 255));
        addMEd.setText("Add Product");
        addMEd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMEdActionPerformed(evt);
            }
        });
        jPanel7.add(addMEd, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 410, 130, 30));

        editMeds.setBackground(new java.awt.Color(0, 153, 255));
        editMeds.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        editMeds.setForeground(new java.awt.Color(255, 255, 255));
        editMeds.setText("Edit Product");
        editMeds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMedsActionPerformed(evt);
            }
        });
        jPanel7.add(editMeds, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 450, 130, 30));

        photoMEds.setBackground(new java.awt.Color(0, 153, 255));
        photoMEds.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        photoMEds.setForeground(new java.awt.Color(255, 255, 255));
        photoMEds.setText("Insert Photo");
        photoMEds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                photoMEdsActionPerformed(evt);
            }
        });
        jPanel7.add(photoMEds, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 379, 130, 20));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/subInterfaces/INVENT_na.png"))); // NOI18N
        jPanel7.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 900, -1));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        invenpaytabb.addTab("", jPanel5);

        jPanel12.setBackground(new java.awt.Color(121, 158, 229));
        jPanel12.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        viewInvent4.setBackground(new java.awt.Color(0, 153, 255));
        viewInvent4.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        viewInvent4.setForeground(new java.awt.Color(255, 255, 255));
        viewInvent4.setText("Generate Reciept");
        viewInvent4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewInvent4ActionPerformed(evt);
            }
        });
        jPanel12.add(viewInvent4, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 110, 140, 30));

        editmedsPayment.setBackground(new java.awt.Color(0, 153, 255));
        editmedsPayment.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        editmedsPayment.setForeground(new java.awt.Color(255, 255, 255));
        editmedsPayment.setText("Edit MedsPayment");
        editmedsPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editmedsPaymentActionPerformed(evt);
            }
        });
        jPanel12.add(editmedsPayment, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 110, 150, 30));

        viewInvent7.setBackground(new java.awt.Color(0, 153, 255));
        viewInvent7.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        viewInvent7.setForeground(new java.awt.Color(255, 255, 255));
        viewInvent7.setText("Delete Payment");
        viewInvent7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewInvent7ActionPerformed(evt);
            }
        });
        jPanel12.add(viewInvent7, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 110, 130, 30));

        addpayment.setBackground(new java.awt.Color(0, 153, 255));
        addpayment.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        addpayment.setForeground(new java.awt.Color(255, 255, 255));
        addpayment.setText("Add Payment");
        addpayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addpaymentActionPerformed(evt);
            }
        });
        jPanel12.add(addpayment, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, 120, 30));

        PAYMENTVIA.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Consultation", "Medicine" }));
        PAYMENTVIA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PAYMENTVIAActionPerformed(evt);
            }
        });
        jPanel12.add(PAYMENTVIA, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 110, 140, 30));

        tabbpay.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        paymentMEds.setBackground(new java.awt.Color(204, 204, 255));
        paymentMEds.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        paymentMEds.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        paymentMEds.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "BuyedMed ID", "Acc ID", "Medicine Name", "Total", "Status", "Payed At"
            }
        ));
        paymentMEds.setGridColor(new java.awt.Color(0, 0, 0));
        jScrollPane3.setViewportView(paymentMEds);

        tabbpay.addTab("", jScrollPane3);

        paymentCOnsult.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        paymentCOnsult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "PaymentID", "Acc ID", "Appointment ID", "Amount to be Paid", "Total Amount", "Status", "Payed When"
            }
        ));
        jScrollPane1.setViewportView(paymentCOnsult);

        tabbpay.addTab("", jScrollPane1);

        jPanel12.add(tabbpay, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 150, 810, 350));

        editPAyments1.setBackground(new java.awt.Color(0, 153, 255));
        editPAyments1.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        editPAyments1.setForeground(new java.awt.Color(255, 255, 255));
        editPAyments1.setText("Edit Payment");
        editPAyments1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPAyments1ActionPerformed(evt);
            }
        });
        jPanel12.add(editPAyments1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 110, 110, 30));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/subInterfaces/MANAGE.png"))); // NOI18N
        jPanel12.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(-20, 0, 950, -1));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        invenpaytabb.addTab("", jPanel11);

        getContentPane().add(invenpaytabb, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 180, 980, 570));

        MENUBTN.setContentAreaFilled(false);
        MENUBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MENUBTNActionPerformed(evt);
            }
        });
        getContentPane().add(MENUBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(1370, 20, 100, 70));

        viewInvent.setBackground(new java.awt.Color(0, 153, 255));
        viewInvent.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        viewInvent.setForeground(new java.awt.Color(255, 255, 255));
        viewInvent.setText("VIEW INVENTORY LIST");
        viewInvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewInventActionPerformed(evt);
            }
        });
        getContentPane().add(viewInvent, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 130, 177, 40));

        viewPayment.setBackground(new java.awt.Color(0, 153, 255));
        viewPayment.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        viewPayment.setForeground(new java.awt.Color(255, 255, 255));
        viewPayment.setText("EXPORT DATA");
        viewPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPaymentActionPerformed(evt);
            }
        });
        getContentPane().add(viewPayment, new org.netbeans.lib.awtextra.AbsoluteConstraints(1270, 160, 177, 30));

        viewPayment2.setBackground(new java.awt.Color(0, 153, 255));
        viewPayment2.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        viewPayment2.setForeground(new java.awt.Color(255, 255, 255));
        viewPayment2.setText("VIEW PAYMENTS");
        viewPayment2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPayment2ActionPerformed(evt);
            }
        });
        getContentPane().add(viewPayment2, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 130, 250, 40));

        DAILYREVENUE.setFont(new java.awt.Font("Century Gothic", 2, 18)); // NOI18N
        DAILYREVENUE.setText("REVENUE HERE");
        getContentPane().add(DAILYREVENUE, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 190, 260, -1));

        jLabel11.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel11.setText("NEAR EXPIRING MEDS: ");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 340, 260, -1));

        jLabel12.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel12.setText("TODAY'S TCM REVENUE: ");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 160, 260, -1));

        jLabel13.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel13.setText("OUTSTANDING PAYMENTS: ");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 220, 260, -1));

        javax.swing.GroupLayout pieforInventorynMedsLayout = new javax.swing.GroupLayout(pieforInventorynMeds);
        pieforInventorynMeds.setLayout(pieforInventorynMedsLayout);
        pieforInventorynMedsLayout.setHorizontalGroup(
            pieforInventorynMedsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 290, Short.MAX_VALUE)
        );
        pieforInventorynMedsLayout.setVerticalGroup(
            pieforInventorynMedsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 270, Short.MAX_VALUE)
        );

        getContentPane().add(pieforInventorynMeds, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 430, 290, 270));

        outstandingList.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        outstandingList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(outstandingList);

        getContentPane().add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 240, 290, 90));

        nearExpimeds.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jScrollPane4.setViewportView(nearExpimeds);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 360, 290, 60));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/subInterfaces/patients 2.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 1510, 780));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MENUBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MENUBTNActionPerformed
    

    // Menu options
    String[] options = {"About Teleclinic", "Back to Menu", "Cancel"};

    // Show option dialog
    int choice = JOptionPane.showOptionDialog(
        this,
        "Welcome to Teleclinic!\n\nChoose an option below:",
        "Teleclinic Menu",
        JOptionPane.DEFAULT_OPTION,
        JOptionPane.PLAIN_MESSAGE,
        null,
        options,
        options[0]
    );

    // Perform actions based on user choice
    switch (choice) {
        case 0: // About Teleclinic
            JOptionPane.showMessageDialog(
                this,
                "🩺 Teleclinic: A modern online medical consultation platform.\n"
                + "Providing accessible healthcare solutions anytime, anywhere.\n\n"
                + "Stay healthy, stay connected!",
                "About Teleclinic",
                JOptionPane.INFORMATION_MESSAGE
            );
            break;

        case 1: // Back to Menu (Do nothing, just return to the main screen)
            JOptionPane.showMessageDialog(this, "Returning to main dashboard...");
            new adminDashboard(accountId).setVisible(true); // Open the login/signup page
            this.dispose();
            break;

        case 2:
        default:
            break;
    
    }
    }//GEN-LAST:event_MENUBTNActionPerformed

    ///reports 
    
      public void updateDailyRevenue(JLabel revenueLabel) {
        // Initialize variables for total paid and total amount
        double totalPaid = 0.0;
        double totalAmount = 0.0;

        // SQL Queries to get the totals for today
        String totalPaidQuery = "SELECT SUM(total_payed) AS total_paid_today FROM buyedmeds WHERE DATE(buyed_when) = CURDATE()";
        String totalAmountQuery = "SELECT SUM(total_amount) AS total_amount_today FROM payments WHERE DATE(payment_date) = CURDATE()";

        try (java.sql.Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
             java.sql.Statement stmt = conn.createStatement()) {

            // Get the total paid
            ResultSet rsPaid = stmt.executeQuery(totalPaidQuery);
            if (rsPaid.next()) {
                totalPaid = rsPaid.getDouble("total_paid_today");
            }

            // Get the total amount
            ResultSet rsAmount = stmt.executeQuery(totalAmountQuery);
            if (rsAmount.next()) {
                totalAmount = rsAmount.getDouble("total_amount_today");
            }

            // Combine the totals (total paid + total amount)
            double total = totalPaid + totalAmount;

            // Update the label with the combined result
            String resultText = String.format("Total Today: ₱%.2f", total);
            revenueLabel.setText(resultText);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error retrieving daily revenue: " + e.getMessage());
        }
    
    }
    
   

    public void updateDailyRevenue() {
        double totalPaid = 0.0;
        double totalAmount = 0.0;

        // SQL Queries to get the totals for today
        String totalPaidQuery = "SELECT SUM(total_payed) AS total_paid_today FROM buyedmeds WHERE payment_status = 'Paid' AND DATE(buyed_when) = CURDATE()";
        String totalAmountQuery = "SELECT SUM(total_amount) AS total_amount_today FROM payments WHERE status = 'Paid' AND DATE(payment_date) = CURDATE()";

        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
             java.sql.Statement stmt = conn.createStatement()) {

            // Get the total paid from buyedmeds
            ResultSet rsPaid = stmt.executeQuery(totalPaidQuery);
            if (rsPaid.next()) {
                totalPaid = rsPaid.getDouble("total_paid_today");
            }

            // Get the total amount from payments
            ResultSet rsAmount = stmt.executeQuery(totalAmountQuery);
            if (rsAmount.next()) {
                totalAmount = rsAmount.getDouble("total_amount_today");
            }

            double total = totalPaid + totalAmount;

            // Prepare and display the result
            StringBuilder resultText = new StringBuilder();
            resultText.append(String.format("Total Revenue : ₱%.2f\n", total));

            // Display the result in the JTextArea
            DAILYREVENUE.setText(resultText.toString());

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error retrieving daily revenue: " + e.getMessage());
        }
    }

    
   private void showAllOutstandingPaymentsInJList(JList<String> paymentList) {
    DefaultListModel<String> model = new DefaultListModel<>();

    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "")) {
        double totalOutstanding = 0.0;

        // PENDING CONSULTATION PAYMENTS
        String query1 = "SELECT payment_id, account_id,  totalAmout_tobepaid, payment_method, payment_type, payment_details, payed_when " +
                        "FROM payments WHERE status = 'Pending'";
        try (PreparedStatement pst = conn.prepareStatement(query1);
             ResultSet rs = pst.executeQuery()) {

           while (rs.next()) {
    String entry = String.format("🧾[ID:%d | Acc:%d]  ₱%.2f | %s - %s | %s",
                    rs.getInt("payment_id"),
                    rs.getInt("account_id"),
                    rs.getDouble("totalAmout_tobepaid"),
                    rs.getString("payment_method"),
                    rs.getString("payment_type"),
                    rs.getString("payment_details"));

            model.addElement(entry);
            totalOutstanding += rs.getDouble("totalAmout_tobepaid");
        }

        }

        // PENDING MEDICINE PAYMENTS
        String query2 = "SELECT buyedmed_id, account_id, medicine_name, quantity, total, payment_method, payment_type, payment_details, buyed_when " +
                        "FROM buyedmeds WHERE payment_status = 'Pending'";
        try (PreparedStatement pst = conn.prepareStatement(query2);
             ResultSet rs = pst.executeQuery()) {

            while (rs.next()) {
                String entry = String.format("💊[Med:%d | Acc:%d]  %s x%d |  ₱%.2f |  %s-%s |  %s",
                        rs.getInt("buyedmed_id"),
                        rs.getInt("account_id"),
                        rs.getString("medicine_name"),
                        rs.getInt("quantity"),
                        rs.getDouble("total"),
                        rs.getString("payment_method"),
                        rs.getString("payment_type"),
                        rs.getString("payment_details"));
                model.addElement(entry);
                totalOutstanding += rs.getDouble("total");
            }
        }

        // Add total at the end
        if (model.isEmpty()) {
            model.addElement("✅ No outstanding payments in the system.");
        } else {
            model.addElement(" ");
            model.addElement(String.format("💸 TOTAL OUTSTANDING (All Accounts): ₱%.2f", totalOutstanding));
        }

        // Apply model to JList
        paymentList.setModel(model);

    } catch (SQLException e) {
        e.printStackTrace();
        DefaultListModel<String> errorModel = new DefaultListModel<>();
        errorModel.addElement("❌ Error fetching data: " + e.getMessage());
        paymentList.setModel(errorModel);
    }
}

   
   
   
    public void showExpiringMedicines(JList<String> expiringList) {
     final int DAYS_BEFORE_EXPIRY = 60; // 2 months

     DefaultListModel<String> listModel = new DefaultListModel<>();

     String query = "SELECT name, brand, expiration_date FROM medicine_basis " +
                    "WHERE expiration_date IS NOT NULL " +
                    "AND expiration_date <= DATE_ADD(CURDATE(), INTERVAL ? DAY) " +
                    "ORDER BY expiration_date ASC";

     try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
          PreparedStatement pst = conn.prepareStatement(query)) {

         pst.setInt(1, DAYS_BEFORE_EXPIRY);

         try (ResultSet rs = pst.executeQuery()) {
             while (rs.next()) {
                 String name = rs.getString("name");
                 String brand = rs.getString("brand");
                 Date expiry = rs.getDate("expiration_date");

                 listModel.addElement(name + " (" + brand + ") - Exp: " + expiry.toString());
             }
         }

         expiringList.setModel(listModel);

     } catch (SQLException e) {
         JOptionPane.showMessageDialog(null, "Error loading expiring medicines: " + e.getMessage());
     }
 }



   public void showRevenueCompositionChart(JPanel targetPanel) {
    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    double consultationRevenue = 0;
    double medicineRevenue = 0;

    try {
        con = DriverManager.getConnection("jdbc:mysql://localhost/teleclinicmedproject", "root", "");

        // Total from consultations
        String consultSQL = "SELECT SUM(total_amount) FROM payments WHERE status = 'Paid'";
        pst = con.prepareStatement(consultSQL);
        rs = pst.executeQuery();
        if (rs.next()) {
            consultationRevenue = rs.getDouble(1);
        }

        // Total from medicine/product sales
        String medSQL = "SELECT SUM(total_payed) FROM buyedmeds WHERE payment_status = 'Paid'";
        pst = con.prepareStatement(medSQL);
        rs = pst.executeQuery();
        if (rs.next()) {
            medicineRevenue = rs.getDouble(1);
        }

        // Dataset for Pie Chart
        DefaultPieDataset dataset = new DefaultPieDataset();
        dataset.setValue("Consultation Fees", consultationRevenue);
        dataset.setValue("Medicine/Product Sales", medicineRevenue);

        // Create Pie Chart
        JFreeChart pieChart = ChartFactory.createPieChart(
            "Revenue Composition", // Title
            dataset,
            true, // Legend
            true,
            false
        );

        // Customize Labels with ₱ and amount
        PiePlot plot = (PiePlot) pieChart.getPlot();
        plot.setLabelGenerator(new StandardPieSectionLabelGenerator(
            "{0}: ₱{1} ({2})", new DecimalFormat("#,##0.00"), new DecimalFormat("0%")
        ));

        // Render chart to ChartPanel
        ChartPanel chartPanel = new ChartPanel(pieChart);
        chartPanel.setPreferredSize(new Dimension(targetPanel.getWidth(), targetPanel.getHeight()));

        // Clear and add chart to the target panel
        targetPanel.removeAll();
        targetPanel.setLayout(new BorderLayout());
        targetPanel.add(chartPanel, BorderLayout.CENTER);
        targetPanel.validate();

    } catch (SQLException e) {
        e.printStackTrace();
    } finally {
        try {
            if (rs != null) rs.close();
            if (pst != null) pst.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
}


   
    
    
    
    
    private void viewInventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewInventActionPerformed
         invenpaytabb.setSelectedIndex(0);
    }//GEN-LAST:event_viewInventActionPerformed

    private void viewPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPaymentActionPerformed
        exportTableToPDF(medsTabb, paymentMEds,paymentCOnsult);
    }//GEN-LAST:event_viewPaymentActionPerformed

    public static void exportTableToPDF(JTable table1, JTable table2, JTable table3) {
    String[] options = {"Inventory Table", "Consult Pay Table", "Medicine Pay Table", "Export All Tables"};
    int choice = JOptionPane.showOptionDialog(null, 
            "Choose which table(s) to export:", "Export Tables", 
            JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, 
            null, options, options[0]);

    if (choice == JOptionPane.CLOSED_OPTION) {
        return;
    }

    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Save PDF");
    fileChooser.setSelectedFile(new java.io.File("exported_tables.pdf"));
    int result = fileChooser.showSaveDialog(null);

    if (result == JFileChooser.APPROVE_OPTION) {
        String filePath = fileChooser.getSelectedFile().getAbsolutePath();
        Document document = new Document();

        try {
            PdfWriter.getInstance(document, new FileOutputStream(filePath));
            document.open();
            com.itextpdf.text.Font font = FontFactory.getFont(FontFactory.HELVETICA, 10);

            // Table 1
            if (choice == 0 || choice == 3) {
                document.add(new Paragraph("Patient Table:", font));
                PdfPTable pdfTable1 = new PdfPTable(table1.getColumnCount());
                for (int i = 0; i < table1.getColumnCount(); i++) {
                    pdfTable1.addCell(new PdfPCell(new Phrase(table1.getColumnName(i), font)));
                }
                for (int row = 0; row < table1.getRowCount(); row++) {
                    for (int col = 0; col < table1.getColumnCount(); col++) {
                        Object value = table1.getValueAt(row, col);
                        pdfTable1.addCell(new PdfPCell(new Phrase(value == null ? "" : value.toString(), font)));
                    }
                }
                document.add(pdfTable1);
                document.newPage();
            }

            // Table 2
            if (choice == 1 || choice == 3) {
                document.add(new Paragraph("Appointment Table:", font));
                PdfPTable pdfTable2 = new PdfPTable(table2.getColumnCount());
                for (int i = 0; i < table2.getColumnCount(); i++) {
                    pdfTable2.addCell(new PdfPCell(new Phrase(table2.getColumnName(i), font)));
                }
                for (int row = 0; row < table2.getRowCount(); row++) {
                    for (int col = 0; col < table2.getColumnCount(); col++) {
                        Object value = table2.getValueAt(row, col);
                        pdfTable2.addCell(new PdfPCell(new Phrase(value == null ? "" : value.toString(), font)));
                    }
                }
                document.add(pdfTable2);
                document.newPage();
            }

            // Table 3
            if (choice == 2 || choice == 3) {
                document.add(new Paragraph("Payment Table:", font));
                PdfPTable pdfTable3 = new PdfPTable(table3.getColumnCount());
                for (int i = 0; i < table3.getColumnCount(); i++) {
                    pdfTable3.addCell(new PdfPCell(new Phrase(table3.getColumnName(i), font)));
                }
                for (int row = 0; row < table3.getRowCount(); row++) {
                    for (int col = 0; col < table3.getColumnCount(); col++) {
                        Object value = table3.getValueAt(row, col);
                        pdfTable3.addCell(new PdfPCell(new Phrase(value == null ? "" : value.toString(), font)));
                    }
                }
                document.add(pdfTable3);
                document.newPage();
            }

            document.close();
            JOptionPane.showMessageDialog(null, "✅ PDF Exported Successfully to: " + filePath);
        } catch (FileNotFoundException | DocumentException e) {
            JOptionPane.showMessageDialog(null, "❌ Failed to export PDF:\n" + e.getMessage());
            e.printStackTrace();
        }
    }
}

    
    
        public void loadMedicineInventoryToTable(JTable table) {
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new String[] {
            "ID", "Name & Brand", "Category", "Details", "Stock", "Price"
        });

        String sql = "SELECT medicine_id, name, brand, category, form, strength, expiration_date, stock, price " +
                     "FROM medicine_basis ORDER BY category ASC";

        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
             java.sql.Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                int id = rs.getInt("medicine_id");
                String nameBrand = rs.getString("name") + " (" + rs.getString("brand") + ")";
                String category = rs.getString("category");
                String details = rs.getString("form") + ", " + rs.getString("strength") + " - Exp: " + rs.getDate("expiration_date");
                int stock = rs.getInt("stock");
                double price = rs.getDouble("price");

                model.addRow(new Object[] {
                    id, nameBrand, category, details, stock, String.format("Php %.2f", price)
                });
            }

            table.setModel(model);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error loading medicine inventory: " + e.getMessage());
        }
    }
    
    
    public void showMedicineDetails(int medicineId) {
    String sql = "SELECT name, brand, category, form, strength, expiration_date, stock, price, medicineImage " +
                 "FROM medicine_basis WHERE medicine_id = ?";

    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
         PreparedStatement stmt = conn.prepareStatement(sql)) {

        stmt.setInt(1, medicineId);
        ResultSet rs = stmt.executeQuery();

        if (rs.next()) {
            String name = rs.getString("name");
            String brand = rs.getString("brand");
            String nameBrand = name + " (" + brand + ")";
            String category = rs.getString("category");
            String details = "<html>" + rs.getString("form") + "<br>"
               + rs.getString("strength") + "<br>"
               + "Exp: " + rs.getDate("expiration_date") + "</html>";

            int stock = rs.getInt("stock");
            double price = rs.getDouble("price");
            java.sql.Blob imageBlob = rs.getBlob("medicineImage");

            // Update your labels (assumes you have these in your panel)
            namePRod.setText(nameBrand);
            categoryProd.setText("Category: " + category);
            deetsPro.setText(details);
            stockprod.setText("Stock: " + stock);
            priceDeets.setText("Price: Php " + String.format("%.2f", price));

            // Image
            if (imageBlob != null) {
                byte[] imageBytes = imageBlob.getBytes(1, (int) imageBlob.length());
                ImageIcon icon = new ImageIcon(imageBytes);
                Image scaledImage = icon.getImage().getScaledInstance(picProd.getWidth(), picProd.getHeight(), Image.SCALE_SMOOTH);
                picProd.setIcon(new ImageIcon(scaledImage));
            } else {
               picProd.setIcon(null);
            }
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error fetching medicine details: " + e.getMessage());
    }
}

    
    
    
    
    private void viewInvent4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewInvent4ActionPerformed
        generatePaymentReceiptPDF();
    }//GEN-LAST:event_viewInvent4ActionPerformed

    private void editmedsPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editmedsPaymentActionPerformed
        updateBuyedMEdDetails();
    }//GEN-LAST:event_editmedsPaymentActionPerformed

  private void generatePaymentReceiptPDF() {
    String[] tableOptions = {"Medicine Payment (buyedmeds)", "Consultation Payment (payments)"};
    String selectedTable = (String) JOptionPane.showInputDialog(
            null, "🧾 Choose payment table:", "Select Table",
            JOptionPane.PLAIN_MESSAGE, null, tableOptions, tableOptions[0]);

    if (selectedTable == null) return;

    String query = "", tableName = "", idColumn = "", displayColumn = "";

    if (selectedTable.startsWith("Medicine")) {
        query = "SELECT buyedmed_id, medicine_name FROM buyedmeds";
        tableName = "buyedmeds";
        idColumn = "buyedmed_id";
        displayColumn = "medicine_name";
    } else {
        query = "SELECT payment_id, appointment_id FROM payments";
        tableName = "payments";
        idColumn = "payment_id";
        displayColumn = "appointment_id";
    }

    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
         PreparedStatement stmt = conn.prepareStatement(query);
         ResultSet rs = stmt.executeQuery()) {

        ArrayList<String> records = new ArrayList<>();
        while (rs.next()) {
            int id = rs.getInt(idColumn);
            String label = rs.getString(displayColumn);
            records.add(id + " - " + (selectedTable.startsWith("Medicine") ? label : "Appointment #" + label));
        }

        if (records.isEmpty()) {
            JOptionPane.showMessageDialog(null, "❌ No records found.");
            return;
        }

        String selectedRecord = (String) JOptionPane.showInputDialog(
                null, "🧾 Select payment record:", "Generate PDF Receipt",
                JOptionPane.PLAIN_MESSAGE, null, records.toArray(), records.get(0));

        if (selectedRecord == null) return;

        int selectedId = Integer.parseInt(selectedRecord.split(" - ")[0]);

        String detailsQuery = "SELECT * FROM " + tableName + " WHERE " + idColumn + "=?";
        try (PreparedStatement detailsStmt = conn.prepareStatement(detailsQuery)) {
            detailsStmt.setInt(1, selectedId);
            ResultSet detailsRs = detailsStmt.executeQuery();

            if (detailsRs.next()) {
                String patientName = "Unknown";
                String doctorName = "Unknown";

                if (tableName.equals("buyedmeds")) {
                    int accountId = detailsRs.getInt("account_id");
                    patientName = getFullNameByAccountId(conn, accountId);
                } else {
                    int appointmentId = detailsRs.getInt("appointment_id");

                    // Get patient and doctor IDs from appointment
                    PreparedStatement apptStmt = conn.prepareStatement("SELECT patient_id, doctor_id FROM appointment WHERE appointment_id = ?");
                    apptStmt.setInt(1, appointmentId);
                    ResultSet apptRs = apptStmt.executeQuery();
                    if (apptRs.next()) {
                        int patientId = apptRs.getInt("patient_id");
                        int doctorId = apptRs.getInt("doctor_id");

                        // Get account_id from patient and doctor
                        int patientAccId = getAccountIdFromPatientId(conn, patientId);
                        int doctorAccId = getAccountIdFromDoctorId(conn, doctorId);

                        // Get names
                        patientName = getFullNameByAccountId(conn, patientAccId);
                        doctorName = getFullNameByAccountId(conn, doctorAccId);
                    }
                }

                // File path
                String fileName = "receipt_" + tableName + "_" + selectedId + ".pdf";
                String userHome = System.getProperty("user.home");
                String filePath = userHome + "/Downloads/" + fileName;

                Document document = new Document();
                PdfWriter.getInstance(document, new FileOutputStream(filePath));
                document.open();

                Font titleFont = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);
                Font normalFont = new Font(Font.FontFamily.HELVETICA, 12, Font.NORMAL);

                document.add(new Paragraph("TELECLINICMED RECEIPT", titleFont));
                document.add(new Paragraph("Receipt Type: " + selectedTable, normalFont));
                document.add(new Paragraph("Date: " + java.time.LocalDate.now(), normalFont));
                document.add(Chunk.NEWLINE);
                document.add(new Paragraph("Patient Name: " + patientName, normalFont));
                if (!doctorName.equals("Unknown")) {
                    document.add(new Paragraph("Doctor Name: " + doctorName, normalFont));
                }
                document.add(Chunk.NEWLINE);

                if (tableName.equals("buyedmeds")) {
                    document.add(new Paragraph("Medicine: " + detailsRs.getString("medicine_name")));
                    document.add(new Paragraph("Quantity: " + detailsRs.getInt("quantity")));
                    document.add(new Paragraph("Price: " + detailsRs.getString("price")));
                    document.add(new Paragraph("Total: " + detailsRs.getString("total")));
                    document.add(new Paragraph("Total Paid: " + detailsRs.getString("total_payed")));
                    document.add(new Paragraph("Payment Method: " + detailsRs.getString("payment_method")));
                    document.add(new Paragraph("Payment Type: " + detailsRs.getString("payment_type")));
                    document.add(new Paragraph("Payment Status: " + detailsRs.getString("payment_status")));
                } else {
                    document.add(new Paragraph("Appointment ID: " + detailsRs.getString("appointment_id")));
                    document.add(new Paragraph("Account ID: " + detailsRs.getString("account_id")));
                    document.add(new Paragraph("Total Due: " + detailsRs.getString("totalAmout_tobepaid")));
                    document.add(new Paragraph("Total Paid: " + detailsRs.getString("total_amount")));
                    document.add(new Paragraph("Payment Method: " + detailsRs.getString("payment_method")));
                    document.add(new Paragraph("Payment Type: " + detailsRs.getString("payment_type")));
                    document.add(new Paragraph("Payment Details: " + detailsRs.getString("payment_details")));
                    document.add(new Paragraph("Payment Date: " + detailsRs.getString("payment_date")));
                    document.add(new Paragraph("Change: " + detailsRs.getString("pay_change")));
                    document.add(new Paragraph("Status: " + detailsRs.getString("status")));
                    document.add(new Paragraph("Payed When: " + detailsRs.getString("payed_when")));
                }

                document.add(Chunk.NEWLINE);
                document.add(new Paragraph("Thank you for using TeleClinicMed!", normalFont));
                document.close();

                JOptionPane.showMessageDialog(null, "✅ PDF receipt generated and saved to Downloads:\n" + fileName);
            } else {
                JOptionPane.showMessageDialog(null, "❌ Record not found.");
            }

        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "❌ Error generating PDF.\n" + e.getMessage());
        e.printStackTrace();
    }
}

  
    private String getFullNameByAccountId(Connection conn, int accountId) throws SQLException {
    String query = "SELECT firstName, middleName, lastName FROM accounts WHERE AccountID = ?";
    try (PreparedStatement stmt = conn.prepareStatement(query)) {
        stmt.setInt(1, accountId);
        ResultSet rs = stmt.executeQuery();
        if (rs.next()) {
            String f = rs.getString("firstName");
            String m = rs.getString("middleName");
            String l = rs.getString("lastName");
            return f + " " + (m != null && !m.isEmpty() ? m + " " : "") + l;
        }
    }
    return "Unknown";
}

private int getAccountIdFromPatientId(Connection conn, int patientId) throws SQLException {
    try (PreparedStatement stmt = conn.prepareStatement("SELECT AccountID FROM patient WHERE patient_id = ?")) {
        stmt.setInt(1, patientId);
        ResultSet rs = stmt.executeQuery();
        if (rs.next()) return rs.getInt("account_id");
    }
    return -1;
}

private int getAccountIdFromDoctorId(Connection conn, int doctorId) throws SQLException {
    try (PreparedStatement stmt = conn.prepareStatement("SELECT AccountID FROM telemed_doctors WHERE doctor_id = ?")) {
        stmt.setInt(1, doctorId);
        ResultSet rs = stmt.executeQuery();
        if (rs.next()) return rs.getInt("account_id");
    }
    return -1;
}

    
    
    private void viewInvent7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewInvent7ActionPerformed
    
    String[] tableOptions = {"Medicine Payment (buyedmeds)", "Consultation Payment (payments)"};
    String selectedTable = (String) JOptionPane.showInputDialog(
            null, "🗂 Choose payment table:", "Select Table",
            JOptionPane.PLAIN_MESSAGE, null, tableOptions, tableOptions[0]);

    if (selectedTable == null) return;

    String query = "";
    String tableName = "";
    String idColumn = "";
    String displayColumn = "";

    if (selectedTable.startsWith("Medicine")) {
        query = "SELECT buyedmed_id, medicine_name FROM buyedmeds";
        tableName = "buyedmeds";
        idColumn = "buyedmed_id";
        displayColumn = "medicine_name";
    } else {
        query = "SELECT payment_id, appointment_id FROM payments WHERE appointment_id IS NOT NULL";
        tableName = "payments";
        idColumn = "payment_id";
        displayColumn = "appointment_id";
    }

    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
         PreparedStatement stmt = conn.prepareStatement(query);
         ResultSet rs = stmt.executeQuery()) {

        ArrayList<String> records = new ArrayList<>();
        while (rs.next()) {
            int id = rs.getInt(idColumn);
            String label = rs.getString(displayColumn);
            records.add(id + " - " + (selectedTable.startsWith("Medicine") ? label : "Appointment #" + label));
        }

        if (records.isEmpty()) {
            JOptionPane.showMessageDialog(null, "❌ No records found in the selected table.");
            return;
        }

        String selectedRecord = (String) JOptionPane.showInputDialog(
                null, "🗑 Select record to delete:", "Delete Payment Record",
                JOptionPane.PLAIN_MESSAGE, null, records.toArray(), records.get(0));

        if (selectedRecord == null) return;

        int selectedId = Integer.parseInt(selectedRecord.split(" - ")[0]);

        int confirm = JOptionPane.showConfirmDialog(null,
                "⚠️ Are you sure you want to delete this payment record?\n" + selectedRecord,
                "Confirm Delete", JOptionPane.YES_NO_OPTION);

        if (confirm != JOptionPane.YES_OPTION) return;

        String deleteSQL = "DELETE FROM " + tableName + " WHERE " + idColumn + "=?";
        try (PreparedStatement deleteStmt = conn.prepareStatement(deleteSQL)) {
            deleteStmt.setInt(1, selectedId);
            int affected = deleteStmt.executeUpdate();

            if (affected > 0) {
                JOptionPane.showMessageDialog(null, "✅ Payment record deleted successfully!");
                getMedicineTransactionTable(paymentMEds);
                getAppointmentPaymentTable(paymentCOnsult);
            } else {
                JOptionPane.showMessageDialog(null, "❌ Failed to delete the payment record.");
            }
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "❌ Error during deletion.\n" + e.getMessage());
        e.printStackTrace();
    
}

    }//GEN-LAST:event_viewInvent7ActionPerformed

    private void viewPayment2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPayment2ActionPerformed
       invenpaytabb.setSelectedIndex(1);
    }//GEN-LAST:event_viewPayment2ActionPerformed

  
    private void pilicombobox(){
       PAYMENTVIA.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selected = (String) PAYMENTVIA.getSelectedItem();
                if (selected == null) return;

                switch (selected) {
                    case "Consultation" -> tabbpay.setSelectedIndex(1);
                    case "Medicine" -> tabbpay.setSelectedIndex(0);
                    default -> tabbpay.setSelectedIndex(0); // fallback
                }
            }
        });
    
    }

    
    
    public void getMedicineTransactionTable(JTable table) {
    DefaultTableModel model = new DefaultTableModel(new String[]{
        "Transaction ID", "Account ID", "Medicine Name", "Total", "Payment Status", "Paid At"
    }, 0);
    

    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
         PreparedStatement stmt = conn.prepareStatement("SELECT buyedmed_id, account_id, medicine_name, total, payment_status, payedAt FROM buyedmeds") // Get selected records
    ) {
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            int buyedMedId = rs.getInt("buyedmed_id");
            int accountId = rs.getInt("account_id");
            String medicineName = rs.getString("medicine_name");
            double total = rs.getDouble("total");
            String paymentStatus = rs.getString("payment_status");
            java.sql.Timestamp payedAt = rs.getTimestamp("payedAt");

            model.addRow(new Object[]{
                buyedMedId, accountId, medicineName, total, paymentStatus, payedAt
            });
        }
        
        paymentMEds.setModel(model); // Set the model to the actual table

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "❌ Error loading transactions:\n" + e.getMessage());
    }

    paymentMEds.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e) {
            int row = paymentMEds.getSelectedRow();
            if (row != -1) { // Ensure the row is valid
                int buyedMedId = (int) paymentMEds.getValueAt(row, 0); // Get the buyedmed_id from the first column
                showMedicineTransactionDetails(buyedMedId); // Call method to show the details
            }
        }
    });

}

    
    public void showMedicineTransactionDetails(int buyedMedId) {
    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
         PreparedStatement stmt = conn.prepareStatement("SELECT * FROM buyedmeds WHERE buyedmed_id = ?") // Fetch all details for the selected transaction
    ) {
        stmt.setInt(1, buyedMedId);
        ResultSet rs = stmt.executeQuery();
        
        if (rs.next()) {
            // Extract all details from the result set
            int accountId = rs.getInt("account_id");
            String medicineName = rs.getString("medicine_name");
            double total = rs.getDouble("total");
            double totalPaid = rs.getDouble("total_payed");
            double change = rs.getDouble("med_change");
            java.sql.Timestamp boughtAt = rs.getTimestamp("buyed_when");
            String paymentMethod = rs.getString("payment_method");
            String paymentType = rs.getString("payment_type");
            String paymentDetails = rs.getString("payment_details");
            String paymentStatus = rs.getString("payment_status");
            java.sql.Timestamp payedAt = rs.getTimestamp("payedAt");

            // Show details in a dialog or another component
            String details = "Transaction ID: " + buyedMedId + "\n" +
                             "Account ID: " + accountId + "\n" +
                             "Medicine: " + medicineName + "\n" +
                             "Total Amount: ₱" + total + "\n" +
                             "Total Paid: ₱" + totalPaid + "\n" +
                             "Change: ₱" + change + "\n" +
                             "Bought At: " + boughtAt + "\n" +
                             "Payment Method: " + paymentMethod + "\n" +
                             "Payment Type: " + paymentType + "\n" +
                             "Payment Details: " + paymentDetails + "\n" +
                             "Payment Status: " + paymentStatus + "\n" +
                             "Paid At: " + payedAt;

            JOptionPane.showMessageDialog(null, details, "Transaction Details", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "❌ Details not found for the selected transaction.");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "❌ Error fetching transaction details:\n" + e.getMessage());
        e.printStackTrace();
    }
}


    
    public void getAppointmentPaymentTable(JTable table1) {
    DefaultTableModel model = new DefaultTableModel(new String[]{
        "Payment ID", "Account ID", "Appointment ID",  "To Pay", "Paid", "Status", "Pay Date"
    }, 0);

    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
         PreparedStatement stmt = conn.prepareStatement("SELECT payment_id, account_id, appointment_id, totalAmout_tobepaid, total_amount, status, payed_when FROM payments")
    ) {
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            int paymentId = rs.getInt("payment_id");
            int accountId = rs.getInt("account_id");
            int appointmentId = rs.getInt("appointment_id");
            double toBePaid = rs.getDouble("totalAmout_tobepaid");
            double totalPaid = rs.getDouble("total_amount");
            String status = rs.getString("status");
            java.sql.Timestamp payedWhen = rs.getTimestamp("payed_when");

            model.addRow(new Object[]{
                paymentId, accountId, appointmentId,  toBePaid, totalPaid, status, payedWhen
            });
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "❌ Error loading appointment payments:\n" + e.getMessage());
    }

    paymentCOnsult.setModel(model);
}

    
    public void addAppointmentPaymentMouseListener(JTable table1) {
    paymentCOnsult.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e) {
            int row = table1.getSelectedRow();
            if (row != -1) {
                int paymentId = (int) table1.getValueAt(row, 0);

                // Show full details
                try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
                     PreparedStatement stmt = conn.prepareStatement("SELECT * FROM payments WHERE payment_id = ?")) {
                    
                    stmt.setInt(1, paymentId);
                    ResultSet rs = stmt.executeQuery();

                    if (rs.next()) {
                        StringBuilder details = new StringBuilder();
                        details.append("📄 Appointment Payment Details\n\n");
                        details.append("Payment ID: ").append(rs.getInt("payment_id")).append("\n");
                        details.append("Account ID: ").append(rs.getInt("account_id")).append("\n");
                        details.append("Appointment ID: ").append(rs.getInt("appointment_id")).append("\n");
                       
                        details.append("To Be Paid: ₱").append(rs.getDouble("totalAmout_tobepaid")).append("\n");
                        details.append("Paid: ₱").append(rs.getDouble("total_amount")).append("\n");
                        details.append("Change: ₱").append(rs.getDouble("pay_change")).append("\n");
                        details.append("Method: ").append(rs.getString("payment_method")).append(" (").append(rs.getString("payment_type")).append(")\n");
                        details.append("Details: ").append(rs.getString("payment_details")).append("\n");
                        details.append("Status: ").append(rs.getString("status")).append("\n");
                        details.append("Pay Date: ").append(rs.getString("payment_date")).append("\n");
                        details.append("Payed When: ").append(rs.getTimestamp("payed_when")).append("\n");

                        JOptionPane.showMessageDialog(null, details.toString(), "Payment Details", JOptionPane.INFORMATION_MESSAGE);
                    }

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "❌ Error retrieving payment details:\n" + ex.getMessage());
                }
            }
        }
    });
}

    
    
    private void addpaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addpaymentActionPerformed
       addPayment();
    }//GEN-LAST:event_addpaymentActionPerformed
        
private void addPayment() {
    String[] options = {"Consultation Payment", "Medicine Purchase Payment"};
    String selectedType = (String) JOptionPane.showInputDialog(null, "💳 Select payment for:", "Add Payment",
            JOptionPane.PLAIN_MESSAGE, null, options, options[0]);

    if (selectedType == null) return;

    String forType = selectedType.equals("Consultation Payment") ? "Consultation" : "Medicine";
    String query = forType.equals("Consultation")
            ? "SELECT payment_id, totalAmout_tobepaid FROM payments WHERE status = 'Pending'"
            : "SELECT buyedmed_id, total FROM buyedmeds WHERE payment_status='Pending'";

    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
         PreparedStatement stmt = conn.prepareStatement(query);
         ResultSet rs = stmt.executeQuery()) {

        Map<String, Double> dataMap = new LinkedHashMap<>();
        while (rs.next()) {
            String id = rs.getString(1);
            double amount = rs.getDouble(2);
            dataMap.put(id, amount);
        }

        if (dataMap.isEmpty()) {
            JOptionPane.showMessageDialog(null, "❌ No pending " + forType + " payment found.");
            return;
        }

        String selectedId = (String) JOptionPane.showInputDialog(null,
                "📝 Select " + (forType.equals("Consultation") ? "payment_id" : "buyedmed_id") + " to pay:",
                "Select Record", JOptionPane.PLAIN_MESSAGE,
                null, dataMap.keySet().toArray(), null);

        if (selectedId == null) return;

        double toBePaid = dataMap.get(selectedId);

        // 🔘 Payment method and auto-type
        String[] paymentMethods = {"Cash", "GCash", "Credit Card", "Debit Card", "Online Banking"};
        String payMethod = (String) JOptionPane.showInputDialog(null, "Select payment method:", "Payment Method",
                JOptionPane.PLAIN_MESSAGE, null, paymentMethods, paymentMethods[0]);
        if (payMethod == null) return;

        String payType = switch (payMethod) {
            case "GCash", "Online Banking" -> "Online";
            default -> "Over-the-Counter";
        };

        String payDetails = JOptionPane.showInputDialog("Payment details (e.g., GCash Ref No., Card No.):");
        if (payDetails == null || payDetails.isEmpty()) return;

        String paidStr = JOptionPane.showInputDialog("Enter amount paid:");
        if (paidStr == null || paidStr.isEmpty()) return;

        double paidAmount = Double.parseDouble(paidStr);
        double change = paidAmount - toBePaid;

        // 🔄 Update the existing record instead of inserting
        String updateQuery;
        if (forType.equals("Consultation")) {
            updateQuery = "UPDATE payments SET total_amount=?, payment_method=?, payment_type=?, payment_details=?, pay_change=?, status='Paid', payed_when=NOW() WHERE payment_id=?";
        } else {
            updateQuery = "UPDATE buyedmeds SET total_payed=?, payment_method=?, payment_type=?, payment_details=?, med_change=?, payment_status='Paid', payedAt=NOW() WHERE buyedmed_id=?";
        }

        try (PreparedStatement updateStmt = conn.prepareStatement(updateQuery)) {
            updateStmt.setDouble(1, paidAmount);
            updateStmt.setString(2, payMethod);
            updateStmt.setString(3, payType);
            updateStmt.setString(4, payDetails);
            updateStmt.setDouble(5, change);
            updateStmt.setInt(6, Integer.parseInt(selectedId));

            int updated = updateStmt.executeUpdate();
            if (updated > 0) {
                JOptionPane.showMessageDialog(null, "✅ Payment updated successfully!");
                getMedicineTransactionTable(paymentMEds);
                getAppointmentPaymentTable(paymentCOnsult);
            } else {
                JOptionPane.showMessageDialog(null, "❌ Failed to update payment record.");
            }
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "❌ Error: " + e.getMessage());
        e.printStackTrace();
    }
}


    
    
    private void editMedsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMedsActionPerformed
         try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
         java.sql.Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery("SELECT medicine_id, name, brand FROM medicine_basis")) {

        DefaultTableModel model = new DefaultTableModel(new Object[]{"ID", "Name", "Brand"}, 0);
        while (rs.next()) {
            int id = rs.getInt("medicine_id");
            String name = rs.getString("name");
            String brand = rs.getString("brand");
            model.addRow(new Object[]{id, name, brand});
        }

        JTable table = new JTable(model);
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setPreferredSize(new Dimension(400, 200));

        int option = JOptionPane.showConfirmDialog(null, scrollPane, "🔍 Select Medicine to Edit", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            int selectedRow = table.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(null, "❌ Please select a medicine.");
                return;
            }

            int selectedMedicineId = (int) table.getValueAt(selectedRow, 0);
            updateMedicineDetails(selectedMedicineId); // call function from earlier
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "❌ Error loading medicine data.\n" + e.getMessage());
    }
    }//GEN-LAST:event_editMedsActionPerformed

    private void updateMedicineDetails(int medicineId) {
    String query = "SELECT * FROM medicine_basis WHERE medicine_id = ?";

    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
         PreparedStatement stmt = conn.prepareStatement(query)) {

        stmt.setInt(1, medicineId);
        ResultSet rs = stmt.executeQuery();

        if (rs.next()) {
            String currentInfo = String.format("""
                💊 Current Info:
                Name: %s
                Brand: %s
                Form: %s
                Strength: %s
                Price: ₱%.2f
                Stock: %d
                Expiration Date: %s
                Prescription Required: %s
                Category: %s
                """,
                rs.getString("name"),
                rs.getString("brand"),
                rs.getString("form"),
                rs.getString("strength"),
                rs.getDouble("price"),
                rs.getInt("stock"),
                rs.getDate("expiration_date"),
                rs.getBoolean("prescription_required") ? "Yes" : "No",
                rs.getString("category")
            );

            JOptionPane.showMessageDialog(null, currentInfo);

            String[] choices = {
                "Name", "Brand", "Form", "Strength", "Price",
                "Stock", "Expiration Date", "Prescription Required", "Category"
            };

            String choice = (String) JOptionPane.showInputDialog(
                    null, "🛠 Choose what to update:", "Update Medicine",
                    JOptionPane.PLAIN_MESSAGE, null, choices, choices[0]);

            if (choice == null) return;

            String newVal = JOptionPane.showInputDialog("New " + choice + ":");
            if (newVal == null || newVal.trim().isEmpty()) return;

            String updateSQL = switch (choice) {
                case "Name" -> "UPDATE medicine_basis SET name = ? WHERE medicine_id = ?";
                case "Brand" -> "UPDATE medicine_basis SET brand = ? WHERE medicine_id = ?";
                case "Form" -> "UPDATE medicine_basis SET form = ? WHERE medicine_id = ?";
                case "Strength" -> "UPDATE medicine_basis SET strength = ? WHERE medicine_id = ?";
                case "Price" -> "UPDATE medicine_basis SET price = ? WHERE medicine_id = ?";
                case "Stock" -> "UPDATE medicine_basis SET stock = ? WHERE medicine_id = ?";
                case "Expiration Date" -> "UPDATE medicine_basis SET expiration_date = ? WHERE medicine_id = ?";
                case "Prescription Required" -> "UPDATE medicine_basis SET prescription_required = ? WHERE medicine_id = ?";
                case "Category" -> "UPDATE medicine_basis SET category = ? WHERE medicine_id = ?";
                default -> "";
            };

            try (PreparedStatement updateStmt = conn.prepareStatement(updateSQL)) {
                switch (choice) {
                    case "Price" -> updateStmt.setDouble(1, Double.parseDouble(newVal));
                    case "Stock" -> updateStmt.setInt(1, Integer.parseInt(newVal));
                    case "Expiration Date" -> updateStmt.setDate(1, java.sql.Date.valueOf(newVal)); // yyyy-MM-dd
                    case "Prescription Required" -> updateStmt.setBoolean(1, newVal.equalsIgnoreCase("yes") || newVal.equalsIgnoreCase("true"));
                    default -> updateStmt.setString(1, newVal);
                }
                updateStmt.setInt(2, medicineId);

                int rows = updateStmt.executeUpdate();
                if (rows > 0) {
                    JOptionPane.showMessageDialog(null, "✅ " + choice + " updated successfully!");
                    loadMedicineInventoryToTable(medsTabb);
                } else {
                    JOptionPane.showMessageDialog(null, "❌ Update failed.");
                }

            } catch (SQLException | IllegalArgumentException ex) {
                JOptionPane.showMessageDialog(null, "❌ Invalid input or SQL error.\n" + ex.getMessage());
                ex.printStackTrace();
            }

        } else {
            JOptionPane.showMessageDialog(null, "❌ Medicine not found.");
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "❌ Error loading medicine.\n" + e.getMessage());
    }}
    
    
    
    private void addMEdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMEdActionPerformed
        AddMedicineForm();
    }//GEN-LAST:event_addMEdActionPerformed

    private void photoMEdsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_photoMEdsActionPerformed
         int selectedRow = medsTabb.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Please select a medicine first.");
        return;
    }

    int medicineId = Integer.parseInt(medsTabb.getValueAt(selectedRow, 0).toString()); // assuming ID is in column 0

    JFileChooser fileChooser = new JFileChooser();
    FileNameExtensionFilter filter = new FileNameExtensionFilter("Image Files", "jpg", "jpeg", "png");
    fileChooser.setFileFilter(filter);

    int result = fileChooser.showOpenDialog(null);
    if (result == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();

        try (FileInputStream fis = new FileInputStream(selectedFile)) {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
            String sql = "UPDATE medicine_basis SET medicineImage = ? WHERE medicine_id = ?";
            PreparedStatement stmt = conn.prepareStatement(sql);

            stmt.setBinaryStream(1, fis, (int) selectedFile.length());
            stmt.setInt(2, medicineId);

            int rows = stmt.executeUpdate();
            if (rows > 0) {
                JOptionPane.showMessageDialog(null, "Picture uploaded successfully.");
                showMedicineDetails(medicineId);
            } else {
                JOptionPane.showMessageDialog(null, "Failed to upload picture.");
            }

            stmt.close();
            conn.close();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
    }
    }//GEN-LAST:event_photoMEdsActionPerformed
        public void AddMedicineForm() {
            JDialog dialog = new JDialog((Frame) null, "Add New Medicine", true);
            dialog.setSize(400, 500);
            dialog.setLayout(new GridLayout(0, 1));

            JTextField nameField = new JTextField();
            JTextField brandField = new JTextField();

            String[] forms = {"Tablet", "Capsule", "Syrup", "Injection", "Liquid"};
            JComboBox<String> formComboBox = new JComboBox<>(forms);

            String[] strengths = {
                "1000mg", "500mg", "200mg", "300mg", "250mg", "20mg", "10mg",
                "120mg/5mL", "100mg/5mL", "5mg/5mL",
                "100U/mL", "1000mcg/mL", "1mg/mL", "50mcg/mL",
                "3%", "10%", "70%", "4%", "400mg"
            };
            JComboBox<String> strengthComboBox = new JComboBox<>(strengths);

            JTextField priceField = new JTextField();
            JTextField stockField = new JTextField();
            JDateChooser expirationPicker = new JDateChooser();
            JCheckBox prescriptionRequiredCheck = new JCheckBox("Prescription Required");

            String[] categories = {"Pain Reliever", "Antibiotic", "Supplement", "Cough & Cold", "Antiseptic", "Vitamins", "Anti-Inflammatory"};
            JComboBox<String> categoryComboBox = new JComboBox<>(categories);

            JButton addButton = new JButton("Add Product");

            dialog.add(new JLabel("Name:")); dialog.add(nameField);
            dialog.add(new JLabel("Brand:")); dialog.add(brandField);
            dialog.add(new JLabel("Form:")); dialog.add(formComboBox);
            dialog.add(new JLabel("Strength:")); dialog.add(strengthComboBox);
            dialog.add(new JLabel("Price:")); dialog.add(priceField);
            dialog.add(new JLabel("Stock:")); dialog.add(stockField);
            dialog.add(new JLabel("Expiration Date:")); dialog.add(expirationPicker);
            dialog.add(prescriptionRequiredCheck);
            dialog.add(new JLabel("Category:")); dialog.add(categoryComboBox);
            dialog.add(addButton);

            addButton.addActionListener(e -> {
                try {
                    String name = nameField.getText();
                    String brand = brandField.getText();
                    String form = (String) formComboBox.getSelectedItem();
                    String strength = (String) strengthComboBox.getSelectedItem();
                    double price = Double.parseDouble(priceField.getText());
                    int stock = Integer.parseInt(stockField.getText());
                    java.util.Date utilDate = expirationPicker.getDate();
                    java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
                    boolean prescription = prescriptionRequiredCheck.isSelected();
                    String category = (String) categoryComboBox.getSelectedItem();

                    Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
                    String sql = "INSERT INTO medicine_basis (name, brand, form, strength, price, stock, expiration_date, prescription_required, category, medicineImage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                    PreparedStatement stmt = conn.prepareStatement(sql);
                    stmt.setString(1, name);
                    stmt.setString(2, brand);
                    stmt.setString(3, form);
                    stmt.setString(4, strength);
                    stmt.setDouble(5, price);
                    stmt.setInt(6, stock);
                    stmt.setDate(7, sqlDate);
                    stmt.setBoolean(8, prescription);
                    stmt.setString(9, category);
                    stmt.setNull(10, java.sql.Types.BLOB); // set picture to null

                    int rows = stmt.executeUpdate();
                    if (rows > 0) {
                        JOptionPane.showMessageDialog(dialog, "Medicine added successfully.");
                        loadMedicineInventoryToTable(medsTabb);
                        dialog.dispose(); // close popup
                    } else {
                        JOptionPane.showMessageDialog(dialog, "Failed to add medicine.");
                    }

                    stmt.close();
                    conn.close();

                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(dialog, "Error: " + ex.getMessage());
                }
            });

            dialog.setLocationRelativeTo(null); // center on screen
            dialog.setVisible(true);
        }




    
    
    
    private void showmedsDeetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showmedsDeetsActionPerformed
        int selectedRow = medsTabb.getSelectedRow();
        if (selectedRow != -1) {
            int medicineId = Integer.parseInt(medsTabb.getValueAt(selectedRow, 0).toString());
            showMedicineDetails(medicineId);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a medicine first.");

        }
    }//GEN-LAST:event_showmedsDeetsActionPerformed

    private void editStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editStockActionPerformed
        int selectedRow = medsTabb.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a medicine first.");
            return;
        }

        int medicineId = (int) medsTabb.getValueAt(selectedRow, 0); // Assuming ID is in column 0
        String medicineName = (String) medsTabb.getValueAt(selectedRow, 1); // Assuming Name is in column 1

        JDialog dialog = new JDialog((Frame) null, "Manage Stock for " + medicineName, true);
        dialog.setSize(300, 200);
        dialog.setLayout(new GridLayout(0, 1));

        JTextField stockField = new JTextField();
        JButton addButton = new JButton("Add Stock");
        JButton subtractButton = new JButton("Subtract Stock");

        dialog.add(new JLabel("Enter quantity:"));
        dialog.add(stockField);
        dialog.add(addButton);
        dialog.add(subtractButton);

        addButton.addActionListener(e -> {
            try {
                int qty = Integer.parseInt(stockField.getText());
                updateStockInDB(medicineId, qty); // Add
                JOptionPane.showMessageDialog(dialog, "Stock added successfully.");
                loadMedicineInventoryToTable(medsTabb);
                dialog.dispose();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(dialog, "Error: " + ex.getMessage());
            }
        });

        subtractButton.addActionListener(e -> {
            try {
                int qty = Integer.parseInt(stockField.getText());
                updateStockInDB(medicineId, -qty); // Subtract
                JOptionPane.showMessageDialog(dialog, "Stock subtracted successfully.");
                loadMedicineInventoryToTable(medsTabb);
                dialog.dispose();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(dialog, "Error: " + ex.getMessage());
            }
        });

        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
    }//GEN-LAST:event_editStockActionPerformed

    private void PAYMENTVIAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PAYMENTVIAActionPerformed
        pilicombobox();
    }//GEN-LAST:event_PAYMENTVIAActionPerformed

    
    private void updateConsultationPaymentDetails() {
    String query = "SELECT payment_id, appointment_id FROM payments WHERE appointment_id IS NOT NULL";  // Fetch consultation payments

    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
         PreparedStatement stmt = conn.prepareStatement(query);
         ResultSet rs = stmt.executeQuery()) {

        ArrayList<String> records = new ArrayList<>();
        while (rs.next()) {
            int paymentId = rs.getInt("payment_id");
            int appointmentId = rs.getInt("appointment_id");
            records.add(paymentId + " - Appointment #" + appointmentId);
        }

        if (records.isEmpty()) {
            JOptionPane.showMessageDialog(null, "❌ No consultation payment records found.");
            return;
        }

        String selectedRecord = (String) JOptionPane.showInputDialog(
                null, "🛠 Select a consultation payment to update:", "Select Record",
                JOptionPane.PLAIN_MESSAGE, null, records.toArray(), records.get(0));

        if (selectedRecord == null) return;

        int selectedPaymentId = Integer.parseInt(selectedRecord.split(" - ")[0]);

        String detailsQuery = "SELECT * FROM payments WHERE payment_id = ?";
        try (PreparedStatement detailsStmt = conn.prepareStatement(detailsQuery)) {
            detailsStmt.setInt(1, selectedPaymentId);
            ResultSet detailsRs = detailsStmt.executeQuery();

            if (detailsRs.next()) {
                String info = String.format("""
                    📄 Current Payment Info:
                    Appointment ID: %s
                    Amount to Pay: %s
                    Amount Paid: %s
                    Payment Method: %s
                    Payment Type: %s
                    Payment Details: %s
                    Status: %s
                    """,
                    detailsRs.getString("appointment_id"),
                    detailsRs.getString("totalAmout_tobepaid"),
                    detailsRs.getString("total_amount"),
                    detailsRs.getString("payment_method"),
                    detailsRs.getString("payment_type"),
                    detailsRs.getString("payment_details"),
                    detailsRs.getString("status")
                );

                JOptionPane.showMessageDialog(null, info);

                String[] choices = {
                    "Total Paid", "Payment Method", "Payment Type", "Payment Details", "Status"
                };
                String choice = (String) JOptionPane.showInputDialog(
                        null, "🛠 Choose what to update:", "Update Payment",
                        JOptionPane.PLAIN_MESSAGE, null, choices, choices[0]);

                if (choice == null) return;

                String newVal = JOptionPane.showInputDialog("New " + choice + ":");
                if (newVal == null || newVal.trim().isEmpty()) return;

                String sql = switch (choice) {
                    case "Total Paid" -> "UPDATE payments SET total_amount=? WHERE payment_id=?";
                    case "Payment Method" -> "UPDATE payments SET payment_method=? WHERE payment_id=?";
                    case "Payment Type" -> "UPDATE payments SET payment_type=? WHERE payment_id=?";
                    case "Payment Details" -> "UPDATE payments SET payment_details=? WHERE payment_id=?";
                    case "Status" -> "UPDATE payments SET status=? WHERE payment_id=?";
                    default -> null;
                };

                if (sql == null) return;

                try (PreparedStatement updateStmt = conn.prepareStatement(sql)) {
                    if (choice.equals("Total Paid")) {
                        updateStmt.setDouble(1, Double.parseDouble(newVal));
                    } else {
                        updateStmt.setString(1, newVal);
                    }
                    updateStmt.setInt(2, selectedPaymentId);

                    int affected = updateStmt.executeUpdate();
                    if (affected > 0) {
                        JOptionPane.showMessageDialog(null, "✅ " + choice + " updated successfully!");
                    } else {
                        JOptionPane.showMessageDialog(null, "❌ Update failed.");
                    }

                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "❌ Error during update.\n" + e.getMessage());
                    e.printStackTrace();
                }
            } else {
                JOptionPane.showMessageDialog(null, "❌ No details found for the selected record.");
            }
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "❌ Error fetching data.\n" + e.getMessage());
        e.printStackTrace();
    }
}

    
    private void editPAyments1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPAyments1ActionPerformed
        updateConsultationPaymentDetails();
    }//GEN-LAST:event_editPAyments1ActionPerformed

      private void updateBuyedMEdDetails() {
    String query = "SELECT buyedmed_id, medicine_name FROM buyedmeds";  // Query to fetch buyedmed_id and medicine_name

    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
         PreparedStatement stmt = conn.prepareStatement(query);
         ResultSet rs = stmt.executeQuery()) {

        // Prepare a list to hold record info (buyedmed_id and medicine_name)
        ArrayList<String> records = new ArrayList<>();
        while (rs.next()) {
            int buyedMedId = rs.getInt("buyedmed_id");
            String medicineName = rs.getString("medicine_name");
            records.add(buyedMedId + " - " + medicineName);  // Store the buyedmed_id and medicine_name together
        }

        if (records.isEmpty()) {
            JOptionPane.showMessageDialog(null, "❌ No records found.");
            return;
        }

        // Show dropdown to select the record to update
        String selectedRecord = (String) JOptionPane.showInputDialog(
                null, "🛠 Select a purchase record to update:", "Select Record",
                JOptionPane.PLAIN_MESSAGE, null, records.toArray(), records.get(0));

        if (selectedRecord == null) return;  // If user cancels

        // Extract buyedmed_id from the selected record string
        int selectedBuyedMedId = Integer.parseInt(selectedRecord.split(" - ")[0]);

        // Query to fetch the details of the selected record
        String detailsQuery = "SELECT * FROM buyedmeds WHERE buyedmed_id = ?";
        try (PreparedStatement detailsStmt = conn.prepareStatement(detailsQuery)) {
            detailsStmt.setInt(1, selectedBuyedMedId);
            ResultSet detailsRs = detailsStmt.executeQuery();

            if (detailsRs.next()) {
                // Prepare a string to display the current purchase details
                String info = String.format("""
                    📄 Current Purchase Info:
                    Medicine: %s
                    Price: %s
                    Quantity: %d
                    Total: %s
                    Paid: %s
                    Payment Method: %s
                    Payment Type: %s
                    Payment Status: %s
                    """,
                    detailsRs.getString("medicine_name"),
                    detailsRs.getString("price"),
                    detailsRs.getInt("quantity"),
                    detailsRs.getString("total"),
                    detailsRs.getString("total_payed"),
                    detailsRs.getString("payment_method"),
                    detailsRs.getString("payment_type"),
                    detailsRs.getString("payment_status")
                );

                // Show the current purchase details in a popup
                JOptionPane.showMessageDialog(null, info);

                // Prompt user to select which field to update
                String[] choices = {
                    "Quantity", "Total", "Total Paid", "Payment Method", "Payment Type", 
                    "Payment Status"
                };
                String choice = (String) JOptionPane.showInputDialog(
                        null, "🛠 Choose what to update:", "Update Purchase",
                        JOptionPane.PLAIN_MESSAGE, null, choices, choices[0]);

                if (choice == null) return;  // If user cancels

                String newVal = JOptionPane.showInputDialog("New " + choice + ":");
                if (newVal == null || newVal.trim().isEmpty()) return;  // If input is empty

                String sql = "";
                switch (choice) {
                    
                    case "Quantity" -> sql = "UPDATE buyedmeds SET quantity=? WHERE buyedmed_id=?";
                    case "Total" -> sql = "UPDATE buyedmeds SET total=? WHERE buyedmed_id=?";
                    case "Total Paid" -> sql = "UPDATE buyedmeds SET total_payed=? WHERE buyedmed_id=?";
                    case "Payment Method" -> sql = "UPDATE buyedmeds SET payment_method=? WHERE buyedmed_id=?";
                    case "Payment Type" -> sql = "UPDATE buyedmeds SET payment_type=? WHERE buyedmed_id=?";
                    case "Payment Status" -> sql = "UPDATE buyedmeds SET payment_status=? WHERE buyedmed_id=?";
                }

                try (PreparedStatement updateStmt = conn.prepareStatement(sql)) {
                    if (choice.equals("Quantity")) {
                        updateStmt.setInt(1, Integer.parseInt(newVal));  // Set as integer for quantity
                    } else {
                        updateStmt.setString(1, newVal);  // Set new value
                    }
                    updateStmt.setInt(2, selectedBuyedMedId);  // Use the selected buyedmed_id

                    int affected = updateStmt.executeUpdate();
                    if (affected > 0) {
                        JOptionPane.showMessageDialog(null, "✅ " + choice + " updated successfully!");
                    } else {
                        JOptionPane.showMessageDialog(null, "❌ Update failed.");
                    }

                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "❌ Error during update.\n" + e.getMessage());
                    e.printStackTrace();
                }
            } else {
                JOptionPane.showMessageDialog(null, "❌ No details found for the selected record.");
            }
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "❌ Error fetching data.\n" + e.getMessage());
        e.printStackTrace();
    }
}

    
    
        public void updateStockInDB(int medicineId, int qtyChange) throws Exception {
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");

        String selectSQL = "SELECT stock FROM medicine_basis WHERE medicine_id = ?";
        PreparedStatement selectStmt = conn.prepareStatement(selectSQL);
        selectStmt.setInt(1, medicineId);
        ResultSet rs = selectStmt.executeQuery();

        if (rs.next()) {
            int currentStock = rs.getInt("stock");
            int newStock = currentStock + qtyChange;
            if (newStock < 0) {
                throw new Exception("Cannot subtract beyond available stock.");
            }

            String updateSQL = "UPDATE medicine_basis SET stock = ? WHERE medicine_id = ?";
            PreparedStatement updateStmt = conn.prepareStatement(updateSQL);
            updateStmt.setInt(1, newStock);
            updateStmt.setInt(2, medicineId);
            updateStmt.executeUpdate();
            updateStmt.close();
        }

        rs.close();
        selectStmt.close();
        conn.close();
    }


    
    
    public static manageInventoryBillsADMIN getInstance() {
        return instance;
    }

    public void switchToTab1(int index) {
        if (tabbedPane != null) { // Check if initialized
            tabbedPane.setSelectedIndex(index);
        } else {
            JOptionPane.showMessageDialog(null, "Tabbed pane is not initialized!");
        }
    
}


    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(manageInventoryBillsADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(manageInventoryBillsADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(manageInventoryBillsADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(manageInventoryBillsADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new manageInventoryBillsADMIN().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DAILYREVENUE;
    private javax.swing.JButton MENUBTN;
    private javax.swing.JComboBox<String> PAYMENTVIA;
    private javax.swing.JButton addMEd;
    private javax.swing.JButton addpayment;
    private javax.swing.JLabel categoryProd;
    private javax.swing.JLabel deetsPro;
    private javax.swing.JButton editMeds;
    private javax.swing.JButton editPAyments1;
    private javax.swing.JButton editStock;
    private javax.swing.JButton editmedsPayment;
    private javax.swing.JTabbedPane invenpaytabb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jtabb;
    private javax.swing.JTable medsTabb;
    private javax.swing.JLabel namePRod;
    private javax.swing.JList<String> nearExpimeds;
    private javax.swing.JList<String> outstandingList;
    private javax.swing.JTable paymentCOnsult;
    private javax.swing.JTable paymentMEds;
    private javax.swing.JButton photoMEds;
    private javax.swing.JLabel picProd;
    private javax.swing.JPanel pieforInventorynMeds;
    private javax.swing.JLabel priceDeets;
    private javax.swing.JButton showmedsDeets;
    private javax.swing.JLabel stockprod;
    private javax.swing.JTabbedPane tabbpay;
    private javax.swing.JButton viewInvent;
    private javax.swing.JButton viewInvent4;
    private javax.swing.JButton viewInvent7;
    private javax.swing.JButton viewPayment;
    private javax.swing.JButton viewPayment2;
    // End of variables declaration//GEN-END:variables
}
