
package subInterfaces;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import javax.swing.*;
import java.awt.*;
import mainInterfaces.adminDashboard;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.FileOutputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import subInterfaces.manageDocsADMIN;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import java.awt.Font;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import java.sql.Statement;


import java.sql.Connection;
import javax.swing.filechooser.FileNameExtensionFilter;
import static subInterfaces.managePatientADMIN.exportTableToPDF;

public class manageDocsADMIN extends javax.swing.JFrame {

    private int accountId;
    private static int loggedInAccountID; 
    public manageDocsADMIN() {
        loggedInAccountID = accountId;
        this.accountId = accountId; 
        initComponents();
        
        loadPrescriptionDetails();
        enableDoctorPopup();
        loadDoctorTable();
        loadPrescriptionChart();
        loadDoctorOfTheMonth();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        manageDoc = new javax.swing.JButton();
        exportData = new javax.swing.JButton();
        presCripDOC = new javax.swing.JButton();
        searchfldDashboard = new javax.swing.JTextField();
        Menu_btn_managedoctor = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        nameDoc = new javax.swing.JLabel();
        kinitaniDoc = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        PICNIDOC = new javax.swing.JLabel();
        totalEarning = new javax.swing.JLabel();
        tabbDOCS = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        doctable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        docSpecialprof = new javax.swing.JLabel();
        docContactprof = new javax.swing.JLabel();
        docEmailprof = new javax.swing.JLabel();
        docLicenseprof = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        picniDoc = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        docSexprof = new javax.swing.JLabel();
        nameDocprof = new javax.swing.JLabel();
        photoUpdate = new javax.swing.JButton();
        exportData1 = new javax.swing.JButton();
        exportData2 = new javax.swing.JButton();
        exportData3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        prescriTbb = new javax.swing.JTable();
        exportData4 = new javax.swing.JButton();
        exportData5 = new javax.swing.JButton();
        chartPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBackground(new java.awt.Color(0, 0, 51));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Century Schoolbook", 1, 28)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("DOCTOR MANAGEMENT");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(491, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 30, 910, -1));

        jPanel6.setBackground(new java.awt.Color(153, 204, 255));

        manageDoc.setBackground(new java.awt.Color(0, 153, 255));
        manageDoc.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        manageDoc.setForeground(new java.awt.Color(255, 255, 255));
        manageDoc.setText("MANAGE DOCTOR");
        manageDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageDocActionPerformed(evt);
            }
        });

        exportData.setBackground(new java.awt.Color(0, 153, 255));
        exportData.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        exportData.setForeground(new java.awt.Color(255, 255, 255));
        exportData.setText("Export Data ");
        exportData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportDataActionPerformed(evt);
            }
        });

        presCripDOC.setBackground(new java.awt.Color(0, 153, 255));
        presCripDOC.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        presCripDOC.setForeground(new java.awt.Color(255, 255, 255));
        presCripDOC.setText("PRESCRIPTIONS");
        presCripDOC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presCripDOCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(manageDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(presCripDOC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 533, Short.MAX_VALUE)
                .addComponent(exportData)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(exportData)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(manageDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(presCripDOC, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24))))
        );

        getContentPane().add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 130, 970, 100));

        searchfldDashboard.setBackground(new java.awt.Color(245, 244, 244));
        searchfldDashboard.setFont(new java.awt.Font("Century Schoolbook", 1, 14)); // NOI18N
        searchfldDashboard.setBorder(null);
        getContentPane().add(searchfldDashboard, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 50, 360, 30));

        Menu_btn_managedoctor.setContentAreaFilled(false);
        Menu_btn_managedoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Menu_btn_managedoctorActionPerformed(evt);
            }
        });
        getContentPane().add(Menu_btn_managedoctor, new org.netbeans.lib.awtextra.AbsoluteConstraints(1350, 30, 100, 70));

        jPanel7.setBackground(new java.awt.Color(0, 153, 255));

        nameDoc.setFont(new java.awt.Font("Century Gothic", 1, 15)); // NOI18N
        nameDoc.setForeground(new java.awt.Color(255, 255, 255));
        nameDoc.setText("NAME: ");

        kinitaniDoc.setFont(new java.awt.Font("Century Gothic", 1, 15)); // NOI18N
        kinitaniDoc.setForeground(new java.awt.Color(255, 255, 255));
        kinitaniDoc.setText("KINITA NYA NA PAID");

        jLabel9.setFont(new java.awt.Font("Century Schoolbook", 1, 15)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 102));
        jLabel9.setText("DOCTOR OF THE MONTH ");

        jLabel10.setFont(new java.awt.Font("Century Schoolbook", 1, 15)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 102));
        jLabel10.setText("TELECLINICMED'S ");

        totalEarning.setFont(new java.awt.Font("Century Gothic", 1, 15)); // NOI18N
        totalEarning.setForeground(new java.awt.Color(255, 255, 255));
        totalEarning.setText("KINITA NYA NA PAID");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addGap(58, 58, 58))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(kinitaniDoc))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(nameDoc))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(totalEarning))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(PICNIDOC, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel9)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PICNIDOC, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameDoc)
                .addGap(2, 2, 2)
                .addComponent(kinitaniDoc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalEarning)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 180, 290, 250));

        tabbDOCS.setBackground(new java.awt.Color(0, 51, 153));

        doctable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "AccID", "DoctorID", "Name", "Speciality", "Contact Number", "Email", "License No. ", "Sex"
            }
        ));
        jScrollPane1.setViewportView(doctable);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel12.setFont(new java.awt.Font("Century Schoolbook", 1, 15)); // NOI18N
        jLabel12.setText("DOCTOR'S PROFILE");

        docSpecialprof.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        docSpecialprof.setText("Specialization");

        docContactprof.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        docContactprof.setText("Contact Num: ");

        docEmailprof.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        docEmailprof.setText("Email ");

        docLicenseprof.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        docLicenseprof.setText("Liscence num");

        jPanel8.setBackground(new java.awt.Color(0, 0, 51));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(picniDoc, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(picniDoc, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel9.setBackground(new java.awt.Color(0, 0, 102));

        jLabel13.setFont(new java.awt.Font("Century Schoolbook", 1, 15)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Smart Care, Anytime!");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGap(56, 56, 56))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        docSexprof.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        docSexprof.setText("sex");

        nameDocprof.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        nameDocprof.setText("Specialization");

        photoUpdate.setBackground(new java.awt.Color(0, 153, 255));
        photoUpdate.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        photoUpdate.setForeground(new java.awt.Color(255, 255, 255));
        photoUpdate.setText("Update Photo");
        photoUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                photoUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jLabel12))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(docSpecialprof)
                            .addComponent(docContactprof)
                            .addComponent(docEmailprof)
                            .addComponent(nameDocprof)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(docLicenseprof)
                                    .addComponent(docSexprof))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                .addComponent(photoUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameDocprof)
                .addGap(3, 3, 3)
                .addComponent(docSpecialprof)
                .addGap(0, 0, 0)
                .addComponent(docContactprof)
                .addGap(0, 0, 0)
                .addComponent(docEmailprof)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(docLicenseprof)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(docSexprof)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(photoUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        exportData1.setBackground(new java.awt.Color(0, 153, 255));
        exportData1.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        exportData1.setForeground(new java.awt.Color(255, 255, 255));
        exportData1.setText("Add Doctor");
        exportData1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportData1ActionPerformed(evt);
            }
        });

        exportData2.setBackground(new java.awt.Color(0, 153, 255));
        exportData2.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        exportData2.setForeground(new java.awt.Color(255, 255, 255));
        exportData2.setText("Update Doctor Details");
        exportData2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportData2ActionPerformed(evt);
            }
        });

        exportData3.setBackground(new java.awt.Color(0, 153, 255));
        exportData3.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        exportData3.setForeground(new java.awt.Color(255, 255, 255));
        exportData3.setText("Delete Doctor");
        exportData3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportData3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
                        .addGap(20, 20, 20))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(exportData1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportData2, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportData3)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(exportData1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(exportData2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(exportData3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        tabbDOCS.addTab("", jPanel1);

        prescriTbb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Prescription ID", "Patient Name", "Doctor Name", "Prescription Date", "Diagnosis", "Medicines", "Status"
            }
        ));
        jScrollPane5.setViewportView(prescriTbb);

        exportData4.setBackground(new java.awt.Color(0, 153, 255));
        exportData4.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        exportData4.setForeground(new java.awt.Color(255, 255, 255));
        exportData4.setText("VIEW DETAILS");
        exportData4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportData4ActionPerformed(evt);
            }
        });

        exportData5.setBackground(new java.awt.Color(0, 153, 255));
        exportData5.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        exportData5.setForeground(new java.awt.Color(255, 255, 255));
        exportData5.setText("PRESCRIPTION PDF");
        exportData5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportData5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(exportData4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportData5))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 930, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportData4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportData5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        tabbDOCS.addTab("", jPanel3);

        getContentPane().add(tabbDOCS, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 240, 980, 520));

        javax.swing.GroupLayout chartPanelLayout = new javax.swing.GroupLayout(chartPanel);
        chartPanel.setLayout(chartPanelLayout);
        chartPanelLayout.setHorizontalGroup(
            chartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 290, Short.MAX_VALUE)
        );
        chartPanelLayout.setVerticalGroup(
            chartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 270, Short.MAX_VALUE)
        );

        getContentPane().add(chartPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 440, 290, 270));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/subInterfaces/patients 2.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1490, 800));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exportDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportDataActionPerformed
          exportTableToPDF(doctable, prescriTbb);
    }//GEN-LAST:event_exportDataActionPerformed
    
     public static void exportTableToPDF(JTable table1, JTable table2) {
      // Show dialog to choose export option
    String[] options = {"Doctor Table", "Prescription Table", "Export Both Tables"};
    int choice = JOptionPane.showOptionDialog(null, 
            "Choose which table(s) to export:", "Export Tables", 
            JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, 
            null, options, options[0]);

    if (choice == JOptionPane.CLOSED_OPTION) {
        return;  // If the user closes the dialog, cancel the export
    }

    // File chooser to save the PDF
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Save PDF");
    fileChooser.setSelectedFile(new java.io.File("exported_table.pdf"));
    int result = fileChooser.showSaveDialog(null);

    if (result == JFileChooser.APPROVE_OPTION) {
        String filePath = fileChooser.getSelectedFile().getAbsolutePath();
        Document document = new Document();

        try {
            // Start the document and prepare to write to PDF
            PdfWriter.getInstance(document, new FileOutputStream(filePath));
            document.open();

            // Default font with reduced size
            com.itextpdf.text.Font font = FontFactory.getFont(FontFactory.HELVETICA, 10);

            // Export selected table(s) based on user's choice
            if (choice == 0 || choice == 2) {
                document.add(new Paragraph("Table 1:", font));
                PdfPTable pdfTable1 = new PdfPTable(table1.getColumnCount());

                // Add table 1 header
                for (int i = 0; i < table1.getColumnCount(); i++) {
                    PdfPCell cell = new PdfPCell(new Phrase(table1.getColumnName(i), font));
                    pdfTable1.addCell(cell);
                }

                // Add table 1 rows
                for (int row = 0; row < table1.getRowCount(); row++) {
                    for (int col = 0; col < table1.getColumnCount(); col++) {
                        Object value = table1.getValueAt(row, col);
                        PdfPCell cell = new PdfPCell(new Phrase(value == null ? "" : value.toString(), font));
                        pdfTable1.addCell(cell);
                    }
                }
                document.add(pdfTable1);
                document.newPage();  // To separate each table
            }

            if (choice == 1 || choice == 2) {
                document.add(new Paragraph("Table 2:", font));
                PdfPTable pdfTable2 = new PdfPTable(table2.getColumnCount());

                // Add table 2 header
                for (int i = 0; i < table2.getColumnCount(); i++) {
                    PdfPCell cell = new PdfPCell(new Phrase(table2.getColumnName(i), font));
                    pdfTable2.addCell(cell);
                }

                // Add table 2 rows
                for (int row = 0; row < table2.getRowCount(); row++) {
                    for (int col = 0; col < table2.getColumnCount(); col++) {
                        Object value = table2.getValueAt(row, col);
                        PdfPCell cell = new PdfPCell(new Phrase(value == null ? "" : value.toString(), font));
                        pdfTable2.addCell(cell);
                    }
                }
                document.add(pdfTable2);
                document.newPage();  // To separate each table
            }

            // Close the document after adding selected table(s)
            document.close();

            JOptionPane.showMessageDialog(null, "✅ PDF Exported Successfully to: " + filePath);
        } catch (FileNotFoundException | DocumentException e) {
            JOptionPane.showMessageDialog(null, "❌ Failed to export PDF:\n" + e.getMessage());
            e.printStackTrace();
        }
    }
}
    
    
       private void loadDoctorOfTheMonth() {
        try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost/teleclinicmedproject", "root", "");
             java.sql.Statement stmt = con.createStatement()) {

            String sql = """
                SELECT d.profilePic,
                       CONCAT(ac.firstName, ' ', ac.lastName) AS fullName,
                       COUNT(a.appointment_id) AS totalCompletedPaid,
                       SUM(a.fee) AS totalEarnings
                FROM appointment a
                JOIN payments p ON a.appointment_id = p.appointment_id
                JOIN telemed_doctors d ON a.doctor_id = d.doctor_id
                JOIN accounts ac ON d.AccountID = ac.AccountID
                WHERE a.status = 'Completed'
                  AND p.status = 'Paid'
                GROUP BY d.doctor_id
                ORDER BY totalCompletedPaid DESC
                LIMIT 1
                """;

            ResultSet rs = stmt.executeQuery(sql);

            if (rs.next()) {
                byte[] profilePicBytes = rs.getBytes("profilePic"); // Get profile picture as bytes
                String nameDocprof = rs.getString("fullName");
                int totalCompletedPaid = rs.getInt("totalCompletedPaid");
                double totalEarnings = rs.getDouble("totalEarnings");

                // Set doctor name
                nameDoc.setText(nameDocprof);

                // Set total completed & paid appointments
                kinitaniDoc.setText("Completed & Paid Appointments: " + totalCompletedPaid);

                // Set total earnings (kinita)
                totalEarning.setText("Total Earnings: ₱" + String.format("%.2f", totalEarnings));  // Assuming you have a JLabel for earnings display

                // Load profile picture from DB
                if (profilePicBytes != null && profilePicBytes.length > 0) {
                    ImageIcon icon = new ImageIcon(profilePicBytes);
                    Image img = icon.getImage().getScaledInstance(PICNIDOC.getWidth(), PICNIDOC.getHeight(), Image.SCALE_SMOOTH);
                    PICNIDOC.setIcon(new ImageIcon(img));
                } else {
                    PICNIDOC.setIcon(null); // No picture available
                }
            } else {
                nameDoc.setText("No Doctor Found");
                kinitaniDoc.setText("");
                totalEarning.setText("Total Earnings: ₱0.00"); // No earnings if no doctor found
                PICNIDOC.setIcon(null);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error loading Doctor of the Month: " + e.getMessage());
        }
}

       
       
      private void updateSelectedDoctor() {
        int selectedRow = doctable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a doctor to update.");
            return;
        }

        int accountId = (int) doctable.getValueAt(selectedRow, 0);

        // Fetch current details
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
             PreparedStatement stmt = conn.prepareStatement(
                 "SELECT a.firstName, a.middleName, a.lastName, a.emailAdd, a.contactNum, d.licenseNum, d.specialty, d.doctors_fee " +
                 "FROM accounts a JOIN telemed_doctors d ON a.AccountID = d.AccountID WHERE a.AccountID = ?")) {

            stmt.setInt(1, accountId);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                String info = String.format("""
                    📄 Current Info:
                    First Name: %s
                    Middle Name: %s
                    Last Name: %s
                    Email: %s
                    Contact #: %s
                    License Number: %s
                    Specialty: %s
                    Doctor's Fee: %s
                    """,
                    rs.getString("firstName"),
                    rs.getString("middleName"),
                    rs.getString("lastName"),
                    rs.getString("emailAdd"),
                    rs.getString("contactNum"),
                    rs.getString("licenseNum"),
                    rs.getString("specialty"),
                    rs.getString("doctors_fee")
                );

                JOptionPane.showMessageDialog(this, info);

                String[] choices = {
                    "Email", "Contact Number", "License Number", "Specialty", "Doctor's Fee"
                };
                String choice = (String) JOptionPane.showInputDialog(
                        this, "🛠 Choose what to update:", "Update Profile",
                        JOptionPane.PLAIN_MESSAGE, null, choices, choices[0]);

                if (choice == null) return;

                String newVal = JOptionPane.showInputDialog(this, "New " + choice + ":");
                if (newVal == null || newVal.trim().isEmpty()) return;

                String sql = switch (choice) {
                    case "Email" -> "UPDATE accounts SET emailAdd=? WHERE AccountID=?";
                    case "Contact Number" -> "UPDATE accounts SET contactNum=? WHERE AccountID=?";
                    case "License Number" -> "UPDATE telemed_doctors SET licenseNum=? WHERE AccountID=?";
                    case "Specialty" -> "UPDATE telemed_doctors SET speciality=? WHERE AccountID=?";
                    case "Doctor's Fee" -> "UPDATE telemed_doctors SET doctors_fee=? WHERE AccountID=?";
                    default -> null;
                };

                if (sql != null) {
                    try (PreparedStatement updateStmt = conn.prepareStatement(sql)) {
                        updateStmt.setString(1, newVal);
                        updateStmt.setInt(2, accountId);

                        int affected = updateStmt.executeUpdate();
                        if (affected > 0) {
                            JOptionPane.showMessageDialog(this, "✅ " + choice + " updated successfully!");
                            // Optionally, refresh the table data
                           
                            loadDoctorTable();
                        } else {
                            JOptionPane.showMessageDialog(this, "❌ Update failed.");
                        }
                    }
                }

            } else {
                JOptionPane.showMessageDialog(this, "❌ No doctor found for the selected account.");
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "❌ Error fetching or updating.\n" + e.getMessage());
            e.printStackTrace();
        }
    }

       
       
       private void loadPrescriptionChart() {
        ChartPanel chartPanel = generatePrescriptionsPerDayChart();
        this.chartPanel.setLayout(new java.awt.BorderLayout());  // Important para di mag-siksikan
        this.chartPanel.add(chartPanel);
        this.chartPanel.revalidate();
    }

        public static ChartPanel generatePrescriptionsPerDayChart() {
            // Create dataset for prescriptions per day
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();

            // Database Connection
            String url = "jdbc:mysql://localhost:3306/teleclinicmedproject";
            String user = "root";
            String password = "";

            // Query to count prescriptions per day
            String prescriptionsQuery = """
                SELECT p.prescription_date, COUNT(p.prescription_id) AS total_prescriptions
                FROM prescriptions p
                GROUP BY p.prescription_date
                ORDER BY p.prescription_date ASC
            """;

            try (java.sql.Connection conn = DriverManager.getConnection(url, user, password);
                 PreparedStatement stmt = conn.prepareStatement(prescriptionsQuery);
                 ResultSet rs = stmt.executeQuery()) {

                // Populate dataset with prescription count per day
                while (rs.next()) {
                    String prescriptionDate = rs.getString("prescription_date");
                    int prescriptionCount = rs.getInt("total_prescriptions");

                    // Add data to dataset
                    dataset.addValue(prescriptionCount, "Prescriptions", prescriptionDate);
                }

            } catch (SQLException e) {
                e.printStackTrace();
            }

            // If no data is retrieved, ensure a message is shown
            if (dataset.getRowCount() == 0) {
                dataset.addValue(0, "Prescriptions", "No data available");
            }

            // Create the bar chart
            JFreeChart chart = ChartFactory.createBarChart(
                    "Prescriptions Per Day",        // Title
                    "Date",                         // X-axis
                    "Prescription Count",           // Y-axis
                    dataset,                        // Dataset
                    PlotOrientation.VERTICAL,       // Vertical orientation
                    true,                           // Include legend
                    true,                           // Tooltips enabled
                    false                           // No URLs
            );

            // Simplified appearance
            chart.setBackgroundPaint(Color.white);
            CategoryPlot plot = chart.getCategoryPlot();
            plot.setBackgroundPaint(Color.white);

            // Customize bar color and appearance
            BarRenderer renderer = (BarRenderer) plot.getRenderer();
            renderer.setSeriesPaint(0, new Color(66, 135, 245)); // Blue for prescriptions
            renderer.setMaximumBarWidth(0.07); // Adjust bar width

            // Slant the X-axis labels to make them readable
            plot.getDomainAxis().setCategoryLabelPositions(CategoryLabelPositions.UP_45); // 45-degree slant

            // Return the chart panel
            ChartPanel chartPanel = new ChartPanel(chart);
            chartPanel.setPreferredSize(new java.awt.Dimension(500, 300));  // Chart size
            chartPanel.setMouseWheelEnabled(true);
            return chartPanel;
        }



    
    
    private void Menu_btn_managedoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Menu_btn_managedoctorActionPerformed
        
        UIManager.put("OptionPane.messageFont", new Font("Arial", Font.BOLD, 14));
        UIManager.put("OptionPane.buttonFont", new Font("Arial", Font.PLAIN, 12));

        // Menu options
        String[] options = {"About Teleclinic", "Back to Menu", "Cancel"};

        // Show option dialog
        int choice = JOptionPane.showOptionDialog(
            this,
            "Welcome to Teleclinic!\n\nChoose an option below:",
            "Teleclinic Menu",
            JOptionPane.DEFAULT_OPTION,
            JOptionPane.PLAIN_MESSAGE,
            null,
            options,
            options[0]
        );

        // Perform actions based on user choice
        switch (choice) {
            case 0: 
            JOptionPane.showMessageDialog(
                this,
                "🩺 Teleclinic: A modern online medical consultation platform.\n"
                + "Providing accessible healthcare solutions anytime, anywhere.\n\n"
                + "Stay healthy, stay connected!",
                "About Teleclinic",
                JOptionPane.INFORMATION_MESSAGE
            );
            break;

            case 1: // Back to Menu (Do nothing, just return to the main screen)
            JOptionPane.showMessageDialog(this, "Returning to main dashboard...");
            new adminDashboard(accountId).setVisible(true); // Open the login/signup page
            this.dispose();
            break;

            case 2:
            default:
            break;

        }
    }//GEN-LAST:event_Menu_btn_managedoctorActionPerformed

    
    private void loadDoctorTable() {
    // Setup the model for the table
    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("Acc ID");
    model.addColumn("Doctor ID");
    model.addColumn("Full Name");
    model.addColumn("Specialty");
    model.addColumn("Contact Number");
    model.addColumn("Email");
    model.addColumn("License Number");
    model.addColumn("Sex");

    // SQL query to fetch doctor details (full name, specialty, contact, email, license, address, and doctor_id)
    String sql = """
    SELECT d.doctor_id, a.AccountID, a.firstName, a.middleName, a.lastName, a.sex, a.emailAdd, a.contactNum, d.specialty, d.licenseNum
    FROM telemed_doctors d
    JOIN accounts a ON d.AccountID = a.AccountID
    """;


    try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost/teleclinicmedproject", "root", "");
         java.sql.Statement stmt = con.createStatement();
         ResultSet rs = stmt.executeQuery(sql)) {

        // Loop through the result set and add data to table
        while (rs.next()) {
            int AccID = rs.getInt("AccountID");
            int doctorId = rs.getInt("doctor_id");
            String firstName = rs.getString("firstName");
            String middleName = rs.getString("middleName");
            String lastName = rs.getString("lastName");
            String fullName = firstName + " " + middleName + " " + lastName;
            String specialty = rs.getString("specialty");
            String contact = rs.getString("contactNum");
            String email = rs.getString("emailAdd");
            String license = rs.getString("licenseNum");
            String sex = rs.getString("sex");

            model.addRow(new Object[]{AccID, doctorId, fullName, specialty, contact, email, license, sex});
        }

        // Set the model for the existing JTable (doctorTable)
        doctable.setModel(model);

    } catch (SQLException e) {
        e.printStackTrace();
    }
}

private void enableDoctorPopup() {
    doctable.addMouseListener(new MouseAdapter() {
        public void mouseClicked(MouseEvent e) {
            // Get the selected row
            int selectedRow = doctable.getSelectedRow();

            // Get values from the selected row
            int doctorId = (int) doctable.getValueAt(selectedRow, 1);
            String fullName = doctable.getValueAt(selectedRow, 2).toString();
            String specialty = doctable.getValueAt(selectedRow, 3).toString();
            String contact = doctable.getValueAt(selectedRow, 4).toString();
            String email = doctable.getValueAt(selectedRow, 5).toString();
            String license = doctable.getValueAt(selectedRow, 6).toString();
            String sex = doctable.getValueAt(selectedRow, 7).toString();

            // Query to get the profile picture of the selected doctor (stored as a BLOB)
            String sql = """
                SELECT profilePic FROM telemed_doctors WHERE doctor_id = ?
            """;

            try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost/teleclinicmedproject", "root", "");
                 PreparedStatement stmt = con.prepareStatement(sql)) {

                stmt.setInt(1, doctorId);
                ResultSet rs = stmt.executeQuery();

                if (rs.next()) {
                    byte[] imgBytes = rs.getBytes("profilePic");

                    if (imgBytes != null && imgBytes.length > 0) {
                        // Convert byte array to ImageIcon
                        ImageIcon icon = new ImageIcon(imgBytes);

                        // Resize image while keeping aspect ratio intact
                        Image img = icon.getImage();
                        int labelWidth = picniDoc.getWidth();
                        int labelHeight = picniDoc.getHeight();

                        // Calculate the scaling factor to maintain aspect ratio
                        double aspectRatio = (double) img.getWidth(null) / (double) img.getHeight(null);
                        int newWidth = labelWidth;
                        int newHeight = (int) (labelWidth / aspectRatio);

                        // If the height exceeds label height, adjust width
                        if (newHeight > labelHeight) {
                            newHeight = labelHeight;
                            newWidth = (int) (labelHeight * aspectRatio);
                        }

                        img = img.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);

                        // Set the image on the JLabel
                        picniDoc.setIcon(new ImageIcon(img));
                    } else {
                        picniDoc.setIcon(null); // Set to default if no picture is available
                    }
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
            }

            // Set the values on the labels in the other panel
            nameDocprof.setText("Name:  " + fullName);
            docSpecialprof.setText("Specialization:  " + specialty);
            docContactprof.setText("Contact:  " + contact);
            docEmailprof.setText("Email:  " + email);
            docLicenseprof.setText("License:  " + license);
            docSexprof.setText("Sex:  " + sex);
        }
    });
}


        ///// prescription

       private void loadPrescriptionDetails() {
        DefaultTableModel model = (DefaultTableModel) prescriTbb.getModel();
        model.setRowCount(0); // Clear existing rows

        String url = "jdbc:mysql://localhost:3306/teleclinicmedproject";
        String user = "root";
        String password = "";

        String sql = """
           SELECT 
                    p.prescription_id, 
                    acc_pat.firstName AS patientFirstName, acc_pat.lastName AS patientLastName, 
                    acc_doc.firstName AS doctorFirstName, acc_doc.lastName AS doctorLastName, 
                    p.prescription_date,
                    d.diagnosis,
                    GROUP_CONCAT(m.name) AS medicines,  -- assuming you have a 'name' column in medicines table
                    p.status
                FROM 
                    prescriptions p
                JOIN 
                    patient pat ON p.patientID = pat.patientID
                JOIN 
                    telemed_doctors doc ON p.doctor_id = doc.doctor_id
                JOIN 
                    prescription_details d ON p.prescription_id = d.prescription_id
                JOIN 
                    medicine_basis m ON d.medicine_id = m.medicine_id  -- assuming you have a medicine table with 'name' column
                JOIN 
                    accounts acc_pat ON pat.AccountID = acc_pat.AccountID  -- joining accounts for patient's name
                JOIN 
                    accounts acc_doc ON doc.AccountID = acc_doc.AccountID  -- joining accounts for doctor's name
                GROUP BY 
                    p.prescription_id
                ORDER BY 
                    p.prescription_date DESC
        """;

        try (java.sql.Connection con = DriverManager.getConnection(url, user, password);
             PreparedStatement pst = con.prepareStatement(sql);
             ResultSet rs = pst.executeQuery()) {

            while (rs.next()) {
                Object[] row = {
                    rs.getInt("prescription_id"),
                    rs.getString("patientFirstName") + " " + rs.getString("patientLastName"),
                    rs.getString("doctorFirstName") + " " + rs.getString("doctorLastName"),
                    rs.getString("prescription_date"),
                    rs.getString("diagnosis"),
                    rs.getString("medicines"),  // Comma separated medicines
                    rs.getString("status")
                };
                model.addRow(row);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

       
    public void popupFullDetailsPrescription() {
    int selectedRow = prescriTbb.getSelectedRow();

    if (selectedRow >= 0) {
        // Get values from the selected row
        int prescriptionId = (int) prescriTbb.getValueAt(selectedRow, 0);
        String patientName = (String) prescriTbb.getValueAt(selectedRow, 1);
        String doctorName = (String) prescriTbb.getValueAt(selectedRow, 2);
        String prescriptionDate = (String) prescriTbb.getValueAt(selectedRow, 3);
        String diagnosis = (String) prescriTbb.getValueAt(selectedRow, 4);
        String status = (String) prescriTbb.getValueAt(selectedRow, 5);

        // Create Popup Dialog for full details
        JDialog detailDialog = new JDialog();
        detailDialog.setTitle("Prescription Full Details");
        detailDialog.setSize(350, 300); // Adjusted size for fitting content
        detailDialog.setLocationRelativeTo(null); // Center the dialog
        detailDialog.setModal(true);

        // Panel for content
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        panel.setBackground(Color.WHITE); // Set white background

        // Title at the top
        JLabel titleLabel = new JLabel("Prescription Details", JLabel.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 16)); // Adjusted font size for title
        panel.add(titleLabel);
        panel.add(Box.createVerticalStrut(5)); // Space between title and content

        // Prescription Details Section
        panel.add(new JLabel("<html><b>Prescription ID:</b> " + prescriptionId + "</html>"));
        panel.add(new JLabel("<html><b>Patient:</b> " + patientName + "</html>"));
        panel.add(new JLabel("<html><b>Doctor:</b> " + doctorName + "</html>"));
        panel.add(new JLabel("<html><b>Date:</b> " + prescriptionDate + "</html>"));
        panel.add(new JLabel("<html><b>Status:</b> " + status + "</html>"));

        // Diagnosis Section (Label only)
        panel.add(new JLabel("<html><b>Diagnosis:</b> " + diagnosis + "</html>"));

        // Medicine Details Section
        panel.add(new JLabel("<html><b>Medicine Details:</b></html>"));

        // Query for Medicine details
        String medicineSql = """
            SELECT m.name, m.strength, d.quantity, d.frequency, d.duration
            FROM prescription_details d
            JOIN medicine_basis m ON d.medicine_id = m.medicine_id
            WHERE d.prescription_id = ?
        """;

        try (java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
             PreparedStatement pst = con.prepareStatement(medicineSql)) {

            pst.setInt(1, prescriptionId);
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                String medicineDetails = String.format(
                        "<html><b>%s</b> (%s) - Quantity: %d, Frequency: %s, Duration: %s</html>",
                        rs.getString("name"),
                        rs.getString("strength"),
                        rs.getInt("quantity"),
                        rs.getString("frequency"),
                        rs.getString("duration")
                );
                panel.add(new JLabel(medicineDetails));
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        // Show the dialog
        detailDialog.add(new JScrollPane(panel));
        detailDialog.setVisible(true);

    } else {
        JOptionPane.showMessageDialog(null, "Please select a row first.", "No Selection", JOptionPane.WARNING_MESSAGE);
    }
}


        public void generatePrescriptionReceiptPDF(int prescriptionId) {
         Document document = new Document();
        try {
            String userHome = System.getProperty("user.home");
            String downloadsPath = Paths.get(userHome, "Downloads").toString();
            String outputPath = downloadsPath + "/prescription_receipt_ADMIN" + prescriptionId + ".pdf";

            if (!Files.exists(Paths.get(downloadsPath))) {
                JOptionPane.showMessageDialog(null, "❌ Downloads folder not found.");
                return;
            }

            PdfWriter.getInstance(document, new FileOutputStream(outputPath));
            document.open();

            // Define fonts
            com.itextpdf.text.Font titleFont = FontFactory.getFont(FontFactory.HELVETICA, 20, Font.BOLD);
            com.itextpdf.text.Font subtitleFont = FontFactory.getFont(FontFactory.HELVETICA, 14, Font.BOLD);
            com.itextpdf.text.Font bodyFont = FontFactory.getFont(FontFactory.HELVETICA, 12);
            com.itextpdf.text.Font smallFont = FontFactory.getFont(FontFactory.HELVETICA, 10);

            // Title
            document.add(new Paragraph("🧾 PRESCRIPTION RECEIPT", titleFont));
            document.add(new Paragraph(" ")); // Space between sections
            document.add(new Paragraph("Receipt ID: " + prescriptionId, subtitleFont));
            document.add(new Paragraph(" "));

            // Fetch prescription and account data
             java.sql.Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
            String prescriptionQuery = """
                SELECT p.prescription_id, p.patientID, p.doctor_id, p.prescription_date, p.status,
                       a.AccountID, a.firstName, a.middleName, a.lastName
                FROM prescriptions p
                JOIN accounts a ON p.patientID = a.AccountID
                WHERE p.prescription_id = ?
            """;

            PreparedStatement ps = conn.prepareStatement(prescriptionQuery);
            ps.setInt(1, prescriptionId);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                int patientId = rs.getInt("patientID");
                int doctorId = rs.getInt("doctor_id");
                String prescriptionDate = rs.getString("prescription_date");
                String status = rs.getString("status");

                // Fetch patient name
                String patientQuery = """
                    SELECT a.firstName, a.middleName, a.lastName
                    FROM accounts a
                    JOIN patient p ON a.AccountID = p.AccountID
                    WHERE p.patientID = ?
                """;
                PreparedStatement patientPs = conn.prepareStatement(patientQuery);
                patientPs.setInt(1, patientId);
                ResultSet patientRs = patientPs.executeQuery();

                String patientName = "";
                if (patientRs.next()) {
                    patientName = patientRs.getString("firstName") + " " +
                                 patientRs.getString("middleName") + " " +
                                 patientRs.getString("lastName");
                }

                // Fetch doctor name
                String doctorQuery = """
                    SELECT a.firstName, a.middleName, a.lastName
                    FROM accounts a
                    WHERE a.AccountID = ?
                """;
                PreparedStatement doctorPs = conn.prepareStatement(doctorQuery);
                doctorPs.setInt(1, doctorId);
                ResultSet doctorRs = doctorPs.executeQuery();

                String doctorName = "";
                if (doctorRs.next()) {
                    doctorName = doctorRs.getString("firstName") + " " +
                                 doctorRs.getString("middleName") + " " +
                                 doctorRs.getString("lastName");
                }

                document.add(new Paragraph("👤 Patient: " + patientName, bodyFont));
                document.add(new Paragraph("👨‍⚕️ Doctor: " + doctorName, bodyFont));
                document.add(new Paragraph("🕓 Prescription Date: " + prescriptionDate, smallFont));
                document.add(new Paragraph("📝 Prescription Status: " + status, bodyFont));
                document.add(new Paragraph(" "));

                // Fetch Medicine details from the prescription
                document.add(new Paragraph("💊 Medicine Details", subtitleFont));

                String medicineSql = """
                    SELECT m.name, m.strength, d.quantity, d.frequency, d.duration
                    FROM prescription_details d
                    JOIN medicine_basis m ON d.medicine_id = m.medicine_id
                    WHERE d.prescription_id = ?
                """;

                PreparedStatement medicinePs = conn.prepareStatement(medicineSql);
                medicinePs.setInt(1, prescriptionId);
                ResultSet medicineRs = medicinePs.executeQuery();

                while (medicineRs.next()) {
                    String medicineDetails = String.format(
                            "• %s (%s) - Quantity: %d, Frequency: %s, Duration: %s",
                            medicineRs.getString("name"),
                            medicineRs.getString("strength"),
                            medicineRs.getInt("quantity"),
                            medicineRs.getString("frequency"),
                            medicineRs.getString("duration")
                    );
                    document.add(new Paragraph(medicineDetails, bodyFont));
                }

                // Close connections
                medicineRs.close();
                medicinePs.close();
                patientRs.close();
                patientPs.close();
                doctorRs.close();
                doctorPs.close();

            } else {
                JOptionPane.showMessageDialog(null, "⚠️ No record found for prescription ID: " + prescriptionId);
            }

            rs.close();
            ps.close();
            conn.close();
            
            // Admin indication section
            document.add(new Paragraph("📌 Generated by Admin for Prescription Pickup", smallFont));

            // Additional note
            document.add(new Paragraph("📌 Note: This receipt serves as proof of your prescription. Please keep it for your records.", smallFont));
            document.add(new Paragraph("Please go to the clinic to pick up your prescribed medicines and show this receipt.", smallFont));

            document.close();
            JOptionPane.showMessageDialog(null, "✅ Prescription Receipt PDF saved to Downloads: prescription_receipt_" + prescriptionId + ".pdf");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "❌ Error generating receipt PDF: " + e.getMessage());
            e.printStackTrace();
        }
        }
        

      // Method to delete doctor and refresh the table in one function
    public void deleteDoctorAndRefresh(JTable doctorTable) {
        int selectedRow = doctorTable.getSelectedRow();  // Get selected row in the table

        if (selectedRow != -1) {  // If a row is selected
            int accountId = (int) doctorTable.getValueAt(selectedRow, 0);  // Assuming AccountID is in the first column
            int doctorId = (int) doctorTable.getValueAt(selectedRow, 1);  // Assuming doctor_id is in the second column

            // Confirm before deletion
            int confirm = JOptionPane.showConfirmDialog(null, "❗ Are you sure you want to delete this doctor?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "")) {

                    // First delete appointments related to the doctor
                    String deleteAppointmentsSql = "DELETE FROM appointment WHERE doctor_id = ?";
                    try (PreparedStatement appointmentStmt = conn.prepareStatement(deleteAppointmentsSql)) {
                        appointmentStmt.setInt(1, doctorId);
                        appointmentStmt.executeUpdate();
                    }

                    // Then delete from telemed_doctors
                    String deleteDoctorSql = "DELETE FROM telemed_doctors WHERE AccountID = ?";
                    try (PreparedStatement doctorStmt = conn.prepareStatement(deleteDoctorSql)) {
                        doctorStmt.setInt(1, accountId);
                        doctorStmt.executeUpdate();
                    }

                    // Then delete from accounts
                    String deleteAccountSql = "DELETE FROM accounts WHERE AccountID = ?";
                    try (PreparedStatement accountStmt = conn.prepareStatement(deleteAccountSql)) {
                        accountStmt.setInt(1, accountId);
                        accountStmt.executeUpdate();
                    }

                    JOptionPane.showMessageDialog(null, "✅ Doctor deleted successfully!");

                    // Refresh the table after deletion
                    DefaultTableModel model = (DefaultTableModel) doctorTable.getModel();
                    model.setRowCount(0);  // Clear existing rows

                    loadDoctorTable();

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "❌ Error deleting doctor: " + ex.getMessage());
                    ex.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "❌ No doctor selected.");
        }
    }
      
        

        

    private void manageDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageDocActionPerformed
        tabbDOCS.setSelectedIndex(0);
    }//GEN-LAST:event_manageDocActionPerformed

    private void presCripDOCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presCripDOCActionPerformed
        tabbDOCS.setSelectedIndex(1);
    }//GEN-LAST:event_presCripDOCActionPerformed

    private void exportData2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportData2ActionPerformed
        updateSelectedDoctor();
    }//GEN-LAST:event_exportData2ActionPerformed

    private void exportData3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportData3ActionPerformed
        deleteDoctorAndRefresh(doctable);
    }//GEN-LAST:event_exportData3ActionPerformed

    private void exportData4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportData4ActionPerformed
        popupFullDetailsPrescription();
    }//GEN-LAST:event_exportData4ActionPerformed

    private void exportData5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportData5ActionPerformed
           int selectedRow = prescriTbb.getSelectedRow();
        
        if (selectedRow >= 0) {
            // Get the prescription ID from the selected row (assuming it's in the first column)
            int prescriptionId = (int) prescriTbb.getValueAt(selectedRow, 0);
            generatePrescriptionReceiptPDF(prescriptionId); // Call the method to generate PDF
        } else {
            JOptionPane.showMessageDialog(null, "Please select a prescription first.", "No Prescription Selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_exportData5ActionPerformed

    private void exportData1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportData1ActionPerformed
      
    JDialog addDoctorDialog = new JDialog();
    addDoctorDialog.setTitle("➕ Add New Doctor");
    addDoctorDialog.setSize(400, 500);
    addDoctorDialog.setLocationRelativeTo(null);
    addDoctorDialog.setModal(true);
    addDoctorDialog.setLayout(new GridLayout(0, 2, 10, 10));

    // Create fields
    JTextField firstNameField = new JTextField();
    JTextField middleNameField = new JTextField();
    JTextField lastNameField = new JTextField();
    JTextField suffixField = new JTextField();
    JTextField birthDateField = new JTextField("yyyy-mm-dd");
    JComboBox<String> sexBox = new JComboBox<>(new String[]{"Male", "Female"});
    JTextField emailField = new JTextField();
    JTextField contactField = new JTextField();
    JTextField usernameField = new JTextField();
    JTextField passwordField = new JTextField();

    JTextField licenseField = new JTextField();
    JTextField specialtyField = new JTextField();
    JTextField feeField = new JTextField();

    JButton submitButton = new JButton("Save Doctor");

    // Add components to dialog
    addDoctorDialog.add(new JLabel("First Name:"));
    addDoctorDialog.add(firstNameField);
    addDoctorDialog.add(new JLabel("Middle Name:"));
    addDoctorDialog.add(middleNameField);
    addDoctorDialog.add(new JLabel("Last Name:"));
    addDoctorDialog.add(lastNameField);
    addDoctorDialog.add(new JLabel("Suffix:"));
    addDoctorDialog.add(suffixField);
    addDoctorDialog.add(new JLabel("Birth Date:"));
    addDoctorDialog.add(birthDateField);
    addDoctorDialog.add(new JLabel("Sex:"));
    addDoctorDialog.add(sexBox);
    addDoctorDialog.add(new JLabel("Email Address:"));
    addDoctorDialog.add(emailField);
    addDoctorDialog.add(new JLabel("Contact Number:"));
    addDoctorDialog.add(contactField);
    addDoctorDialog.add(new JLabel("Username:"));
    addDoctorDialog.add(usernameField);
    addDoctorDialog.add(new JLabel("Password:"));
    addDoctorDialog.add(passwordField);
    addDoctorDialog.add(new JLabel("License Number:"));
    addDoctorDialog.add(licenseField);
    addDoctorDialog.add(new JLabel("Specialty:"));
    addDoctorDialog.add(specialtyField);
    addDoctorDialog.add(new JLabel("Doctor's Fee:"));
    addDoctorDialog.add(feeField);
    addDoctorDialog.add(new JLabel());
    addDoctorDialog.add(submitButton);

    // Button Action
    submitButton.addActionListener(e -> {
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "")) {

            // Insert into accounts
            String sql = "INSERT INTO accounts (Role, firstName, middleName, lastName, birthDate, Sex, emailAdd, contactNum, username, password, createdAt) " +
                         "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())";

            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                String role = "Doctor";

                // Merge last name + suffix
                String lastName = lastNameField.getText();
                if (!suffixField.getText().isEmpty()) {
                    lastName += " " + suffixField.getText();
                }

                pstmt.setString(1, role);
                pstmt.setString(2, firstNameField.getText());
                pstmt.setString(3, middleNameField.getText());
                pstmt.setString(4, lastName);
                pstmt.setString(5, birthDateField.getText());
                pstmt.setString(6, sexBox.getSelectedItem().toString());
                pstmt.setString(7, emailField.getText());
                pstmt.setString(8, contactField.getText());
                pstmt.setString(9, usernameField.getText());
                pstmt.setString(10, passwordField.getText());

                int rowsInserted = pstmt.executeUpdate();

                if (rowsInserted > 0) {
                    // Select the AccountID just inserted
                    String selectSql = "SELECT AccountID FROM accounts WHERE username = ?";
                    try (PreparedStatement selectStmt = conn.prepareStatement(selectSql)) {
                        selectStmt.setString(1, usernameField.getText());

                        ResultSet rs = selectStmt.executeQuery();

                        if (rs.next()) {
                            int accountId = rs.getInt("AccountID");

                            // Insert into telemed_doctors
                            String doctorSql = "INSERT INTO telemed_doctors (AccountID, licenseNum, specialty, doctors_fee) VALUES (?, ?, ?, ?)";
                            try (PreparedStatement doctorStmt = conn.prepareStatement(doctorSql)) {
                                doctorStmt.setInt(1, accountId);
                                doctorStmt.setString(2, licenseField.getText());
                                doctorStmt.setString(3, specialtyField.getText());
                                doctorStmt.setString(4, feeField.getText());

                                doctorStmt.executeUpdate();
                            }

                            JOptionPane.showMessageDialog(addDoctorDialog, "✅ Doctor added successfully!");
                            addDoctorDialog.dispose();
                        } else {
                            JOptionPane.showMessageDialog(addDoctorDialog, "❌ Failed to retrieve AccountID.");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(addDoctorDialog, "❌ Failed to add doctor to accounts.");
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(addDoctorDialog, "❌ Error: " + ex.getMessage());
            ex.printStackTrace();
        }
    });

    addDoctorDialog.setVisible(true);
    }//GEN-LAST:event_exportData1ActionPerformed

    private void photoUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_photoUpdateActionPerformed
   
    int selectedRow = doctable.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Please select a medicine first.");
        return;
    }

    int medicineId = Integer.parseInt(doctable.getValueAt(selectedRow, 1).toString()); // assuming ID is in column 0

    JFileChooser fileChooser = new JFileChooser();
    FileNameExtensionFilter filter = new FileNameExtensionFilter("Image Files", "jpg", "jpeg", "png");
    fileChooser.setFileFilter(filter);

    int result = fileChooser.showOpenDialog(null);
    if (result == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();

        try (FileInputStream fis = new FileInputStream(selectedFile)) {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/teleclinicmedproject", "root", "");
            String sql = "UPDATE telemed_doctors SET profilePic = ? WHERE doctor_id = ?";
            PreparedStatement stmt = conn.prepareStatement(sql);

            stmt.setBinaryStream(1, fis, (int) selectedFile.length());
            stmt.setInt(2, medicineId);

            int rows = stmt.executeUpdate();
            if (rows > 0) {
                JOptionPane.showMessageDialog(null, "Picture uploaded successfully.");
            } else {
                JOptionPane.showMessageDialog(null, "Failed to upload picture.");
            }

            stmt.close();
            conn.close();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
    
}

        
        
    }//GEN-LAST:event_photoUpdateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(manageDocsADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(manageDocsADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(manageDocsADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(manageDocsADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new manageDocsADMIN().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Menu_btn_managedoctor;
    private javax.swing.JLabel PICNIDOC;
    private javax.swing.JPanel chartPanel;
    private javax.swing.JLabel docContactprof;
    private javax.swing.JLabel docEmailprof;
    private javax.swing.JLabel docLicenseprof;
    private javax.swing.JLabel docSexprof;
    private javax.swing.JLabel docSpecialprof;
    private javax.swing.JTable doctable;
    private javax.swing.JButton exportData;
    private javax.swing.JButton exportData1;
    private javax.swing.JButton exportData2;
    private javax.swing.JButton exportData3;
    private javax.swing.JButton exportData4;
    private javax.swing.JButton exportData5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel kinitaniDoc;
    private javax.swing.JButton manageDoc;
    private javax.swing.JLabel nameDoc;
    private javax.swing.JLabel nameDocprof;
    private javax.swing.JButton photoUpdate;
    private javax.swing.JLabel picniDoc;
    private javax.swing.JButton presCripDOC;
    private javax.swing.JTable prescriTbb;
    private javax.swing.JTextField searchfldDashboard;
    private javax.swing.JTabbedPane tabbDOCS;
    private javax.swing.JLabel totalEarning;
    // End of variables declaration//GEN-END:variables
}
